Microsoft (R) Macro Assembler Version 14.10.25019.0	    12/11/17 20:41:23
2048			(2048.asm			     Page 1 - 1


				   TITLE 2048			(2048.asm)

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				; procedure prototypes:
				SetColor PROTO forecolor:BYTE, backcolor: BYTE
				WriteColorChar PROTO char:BYTE, forecolor:BYTE, backcolor:BYTE
				PrintLine PROTO idx:BYTE
				PrintBoard PROTO
				RandomCell PROTO
				TakeInput PROTO
				ShiftLeft PROTO
				ShiftRight PROTO
				ShiftDown PROTO
				ShiftUp PROTO
				SetColors PROTO
				MergeUp PROTO
				MergeDown PROTO
				MergeRight PROTO
				MergeLeft PROTO

 00000000			.data
 00000000 00000032		valueB DWORD '2'
 = 00000004			rowH = 4
 = 00000010			numCell = 16
 00000004 00000000		ranCell DWORD ?
 = 00000002			loops = 2

 = 00000008			emptyCol = 8
 = 00000000			emptyVal = 0
 00000008 08 0B 03 01 05	colors BYTE 8,LightCyan,Cyan,Blue,Magenta,LightMagenta,White,Black,Red
	   0D 0F 00 04
 00000011 00 02 04 08 10	vals BYTE 0,2,4,8,16,32,64,128,129
	   20 40 80 81

 0000001A 00 00 00 00 00	cellColors BYTE	?,?,?,?,
	   00 00 00 00 00
	   00 00 00 00 00
	   00
								?,?,?,?,
								?,?,?,?,
								?,?,?,?		; initializes cell colors to default
 0000002A 02 02 00 00 00	cellVals BYTE	2,2,0,0,
	   00 00 00 00 00
	   02 00 00 00 00
	   00
								0,0,0,0,
								0,0,2,0,
								0,0,0,0		; initializes cell values to default
 0000003A 00			shiftDirection BYTE ?
 0000003B 00			key BYTE ?
 0000003C 00000000		rowIdx DWORD ?
 00000040 00000000		shiftArray DWORD emptyVal,emptyVal,emptyVal,emptyVal
	   00000000
	   00000000
	   00000000
 00000050 00000000		colIndex DWORD ?
 00000054 43 6F 6E 67 72	winString BYTE "Congratulations! YOU WON!!!", 0h
	   61 74 75 6C 61
	   74 69 6F 6E 73
	   21 20 59 4F 55
	   20 57 4F 4E 21
	   21 21 00
 00000070 00			gameOver BYTE 0

 00000071 00			putCell BYTE 0

 00000000			.code
 00000000			main PROC
 00000000  E8 00000000 E		call Randomize
 00000005  E8 000003E5			call PrintBoard

 0000000A			mainLoop:

 0000000A  E8 0000001E			call TakeInput
					.if gameOver == 1
 0000000F  80 3D 00000070 R
	   01		   *	    cmp    gameOver, 001h
 00000016  75 02	   *	    jne    @C0001
 00000018  EB 0C				jmp done
					.endif
 0000001A		   *@C0001:
 0000001A  E8 00000430			call RandomCell
 0000001F  E8 000003CB			call PrintBoard
 00000024  E2 E4			loop mainLoop

 00000026			done:
				    exit
 00000026  6A 00	   *	    push   +000000000h
 00000028  E8 00000000 E   *	    call   ExitProcess
 0000002D			main ENDP

 0000002D			TakeInput PROC
 0000002D  E8 00000000 E		call ReadChar
 00000032  A2 0000003B R		mov key,al
					.if key == 97				
 00000037  80 3D 0000003B R
	   61		   *	    cmp    key, 061h
 0000003E  75 11	   *	    jne    @C0003
 00000040  E8 0000019C				call ShiftLeft
 00000045  E8 00000054				call MergeLeft
 0000004A  E8 00000192				call ShiftLeft
					.elseif key == 115			
 0000004F  EB 4C	   *	    jmp    @C0005
 00000051		   *@C0003:
 00000051  80 3D 0000003B R
	   73		   *	    cmp    key, 073h
 00000058  75 11	   *	    jne    @C0006
 0000005A  E8 000001EB				call ShiftDown
 0000005F  E8 000000DB				call MergeVertical
 00000064  E8 000001E1				call ShiftDown
					.elseif key == 100			
 00000069  EB 32	   *	    jmp    @C0008
 0000006B		   *@C0006:
 0000006B  80 3D 0000003B R
	   64		   *	    cmp    key, 064h
 00000072  75 11	   *	    jne    @C0009
 00000074  E8 0000023B				call ShiftRight
 00000079  E8 00000020				call MergeLeft
 0000007E  E8 00000231				call ShiftRight
					.elseif key == 119			
 00000083  EB 18	   *	    jmp    @C000B
 00000085		   *@C0009:
 00000085  80 3D 0000003B R
	   77		   *	    cmp    key, 077h
 0000008C  75 0F	   *	    jne    @C000C
 0000008E  E8 0000028A				call ShiftUp
 00000093  E8 000000A7				call MergeVertical
 00000098  E8 00000280				call ShiftUp
					.endif
 0000009D		   *@C000C:
 0000009D		   *@C000B:
 0000009D		   *@C0008:
 0000009D		   *@C0005:
 0000009D  C3				ret
 0000009E			TakeInput ENDP

 0000009E			MergeLeft PROC
 0000009E  BE 00000000			mov esi, 0
 000000A3			rowLoop:
 000000A3  83 FE 04			cmp esi, 4
 000000A6  0F 84 00000092		je done
 000000AC  60				pushad

 000000AD  89 35 0000003C R		mov rowIdx, esi
 000000B3  BE 00000000			mov esi, 0
 000000B8				colLoop:
 000000B8  83 FE 03				cmp esi, 3
 000000BB  74 7A				je innerDone

 000000BD  A1 0000003C R			mov eax, rowIdx
 000000C2  03 C0				add eax, eax
 000000C4  03 C0				add eax, eax
 000000C6  03 C6				add eax, esi

 000000C8  8A 98 0000002B R			mov bl, cellVals[eax+1]
						.if cellVals[eax] == bl	;cellVals[eax+1]
 000000CE  38 98 0000002A R *	    cmp    cellVals + [eax], bl
 000000D4  75 5E	   *	    jne    @C000E
 000000D6  8B F9					mov edi,ecx
 000000D8  B9 00000007					mov ecx,7
 000000DD						LeftLoop:
 000000DD  8A 91 00000011 R					mov dl,vals[ecx]
								.if cellVals[eax] == dl
 000000E3  38 90 0000002A R *	    cmp    cellVals + [eax], dl
 000000E9  75 13	   *	    jne    @C0010
 000000EB  8A 91 00000012 R						mov dl,vals[ecx+1]
 000000F1  88 90 0000002A R						mov cellVals[eax], dl
 000000F7  C6 80 0000002B R						mov cellVals[eax+1], emptyVal
	   00
								.endif
 000000FE		   *@C0010:
 000000FE  E2 DD					loop LeftLoop
 00000100  8B CF					mov ecx,edi
 00000102  8A 15 00000019 R				mov dl,vals[8]
							.if cellVals[eax] == dl
 00000108  38 90 0000002A R *	    cmp    cellVals + [eax], dl
 0000010E  75 24	   *	    jne    @C0012
								invoke SetColor, white, black
 00000110  6A 00	   *	    push   +000000000h
 00000112  6A 0F	   *	    push   +00000000Fh
 00000114  E8 00000469	   *	    call   SetColor
 00000119  E8 00000000 E					call clrscr
 0000011E  BA 00000054 R					mov edx, offset winString
 00000123  E8 00000000 E					call WriteString
 00000128  E8 00000000 E					call crlf
 0000012D  C6 05 00000070 R					mov gameOver, 1
	   01
							.endif
						.endif
 00000134		   *@C0012:
 00000134		   *@C000E:

 00000134  46					inc esi
 00000135  EB 81				jmp colLoop
 00000137			innerDone:
 00000137  61				popad
 00000138  46				inc esi
 00000139  E9 FFFFFF65			jmp rowLoop
 0000013E			done:
 0000013E  C3				ret
 0000013F			MergeLeft ENDP


 0000013F			MergeVertical PROC

 0000013F  BE 00000000			mov esi, 0
 00000144			rowLoop:
 00000144  83 FE 04			cmp esi, rowH
 00000147  0F 84 00000093		je done
 0000014D  60				pushad

 0000014E  89 35 00000050 R		mov colIndex, esi
 00000154  BE 00000000			mov esi, 0
 00000159				colLoop:
 00000159  83 FE 03				cmp esi, 3
 0000015C  74 7B				je innerDone

 0000015E  8B C6				mov eax, esi
 00000160  03 C0				add eax, eax
 00000162  03 C0				add eax, eax
 00000164  03 05 00000050 R			add eax, colIndex

						
 0000016A  8A 98 0000002E R			mov bl, cellVals[eax+rowH]
						.if cellVals[eax] == bl	;cellVals[eax+rowH]
 00000170  38 98 0000002A R *	    cmp    cellVals + [eax], bl
 00000176  75 5E	   *	    jne    @C0014
 00000178  8B F9					mov edi,ecx
 0000017A  B9 00000007					mov ecx,7
 0000017F						VertLoop:
 0000017F  8A 91 00000011 R					mov dl,vals[ecx]
								.if cellVals[eax] == dl
 00000185  38 90 0000002A R *	    cmp    cellVals + [eax], dl
 0000018B  75 13	   *	    jne    @C0016
 0000018D  8A 91 00000012 R						mov dl,vals[ecx+1]
 00000193  88 90 0000002A R						mov cellVals[eax], dl
 00000199  C6 80 0000002E R						mov cellVals[eax+rowH], emptyVal
	   00
								.endif
 000001A0		   *@C0016:
 000001A0  E2 DD					loop VertLoop
 000001A2  8B CF					mov ecx,edi

 000001A4  8A 15 00000019 R				mov dl,vals[8]
							.if cellVals[eax] == dl
 000001AA  38 90 0000002A R *	    cmp    cellVals + [eax], dl
 000001B0  75 24	   *	    jne    @C0018
								invoke SetColor, white, black
 000001B2  6A 00	   *	    push   +000000000h
 000001B4  6A 0F	   *	    push   +00000000Fh
 000001B6  E8 000003C7	   *	    call   SetColor
 000001BB  E8 00000000 E					call clrscr
 000001C0  BA 00000054 R					mov edx, offset winString
 000001C5  E8 00000000 E					call WriteString
 000001CA  E8 00000000 E					call crlf
 000001CF  C6 05 00000070 R					mov gameOver, 1
	   01
							.endif
						.endif
 000001D6		   *@C0018:
 000001D6		   *@C0014:

 000001D6  46					inc esi
 000001D7  EB 80				jmp colLoop
 000001D9			innerDone:
 000001D9  61				popad
 000001DA  46				inc esi
 000001DB  E9 FFFFFF64			jmp rowLoop
 000001E0			done:

 000001E0  C3				ret
 000001E1			MergeVertical ENDP


 000001E1			ShiftLeft PROC
 000001E1  BE 00000000			mov esi, 0
 000001E6			rowLoop:
 000001E6  83 FE 04			cmp esi, rowH
 000001E9  74 5E			je done
 000001EB  60				pushad
 000001EC  C7 05 00000040 R		mov shiftArray[0], emptyVal
	   00000000
 000001F6  C7 05 00000044 R		mov shiftArray[4], emptyVal
	   00000000
 00000200  C7 05 00000048 R		mov shiftArray[8], emptyVal
	   00000000
 0000020A  C7 05 0000004C R		mov shiftArray[12], emptyVal
	   00000000
 00000214  89 35 0000003C R		mov rowIdx, esi
 0000021A  BE 00000000			mov esi, 0
 0000021F				colLoop:
 0000021F  83 FE 04				cmp esi, rowH
 00000222  74 1C				je innerDone
 00000224  A1 0000003C R			mov eax, rowIdx
 00000229  03 C0				add eax, eax
 0000022B  03 C0				add eax, eax
 0000022D  03 C6				add eax, esi
						.if cellVals[eax] != emptyVal
 0000022F  80 B8 0000002A R
	   00		   *	    cmp    cellVals + [eax], emptyVal
 00000236  74 05	   *	    je	@C001A
 00000238  E8 000003B6					call append
						.endif
 0000023D		   *@C001A:
 0000023D  46					inc esi
 0000023E  EB DF				jmp colLoop
 00000240			innerDone:
 00000240  E8 0000035C			call transferArray
 00000245  61				popad
 00000246  46				inc esi
 00000247  EB 9D			jmp rowLoop
 00000249			done:
 00000249  C3				ret
 0000024A			ShiftLeft ENDP

 0000024A			ShiftDown PROC
 0000024A  BE 00000000			mov esi, 0
 0000024F			rowLoop:
 0000024F  83 FE 04			cmp esi, rowH
 00000252  74 5F			je done
 00000254  60				pushad
 00000255  C7 05 00000040 R		mov shiftArray[0], emptyVal
	   00000000
 0000025F  C7 05 00000044 R		mov shiftArray[4], emptyVal
	   00000000
 00000269  C7 05 00000048 R		mov shiftArray[8], emptyVal
	   00000000
 00000273  C7 05 0000004C R		mov shiftArray[12], emptyVal
	   00000000
 0000027D  89 35 0000003C R		mov rowIdx, esi
 00000283  BE 00000004			mov esi, rowH
 00000288				colLoop:
 00000288  83 FE 00				cmp esi, 0
 0000028B  74 1D				je innerDone
 0000028D  4E					dec esi
 0000028E  8B C6				mov eax, esi
 00000290  03 C0				add eax, eax
 00000292  03 C0				add eax, eax
 00000294  03 05 0000003C R			add eax, rowIdx
						.if cellVals[eax] != emptyVal
 0000029A  80 B8 0000002A R
	   00		   *	    cmp    cellVals + [eax], emptyVal
 000002A1  74 05	   *	    je	@C001C
 000002A3  E8 00000375					call appendReversed
						.endif
 000002A8		   *@C001C:
 000002A8  EB DE				jmp colLoop
 000002AA			innerDone:
 000002AA  E8 0000031B			call transferTransposedArray
 000002AF  61				popad
 000002B0  46				inc esi
 000002B1  EB 9C			jmp rowLoop
 000002B3			done:
 000002B3  C3				ret
 000002B4			ShiftDown ENDP

 000002B4			ShiftRight PROC
 000002B4  BE 00000000			mov esi, 0
 000002B9			rowLoop:
 000002B9  83 FE 04			cmp esi, rowH
 000002BC  74 5E			je done
 000002BE  60				pushad
 000002BF  C7 05 00000040 R		mov shiftArray[0], emptyVal
	   00000000
 000002C9  C7 05 00000044 R		mov shiftArray[4], emptyVal
	   00000000
 000002D3  C7 05 00000048 R		mov shiftArray[8], emptyVal
	   00000000
 000002DD  C7 05 0000004C R		mov shiftArray[12], emptyVal
	   00000000
 000002E7  89 35 0000003C R		mov rowIdx, esi
 000002ED  BE 00000004			mov esi, rowH
 000002F2				colLoop:
 000002F2  83 FE 00				cmp esi, 0
 000002F5  74 1C				je innerDone
 000002F7  4E					dec esi
 000002F8  A1 0000003C R			mov eax, rowIdx
 000002FD  03 C0				add eax, eax
 000002FF  03 C0				add eax, eax
 00000301  03 C6				add eax, esi
						.if cellVals[eax] != emptyVal
 00000303  80 B8 0000002A R
	   00		   *	    cmp    cellVals + [eax], emptyVal
 0000030A  74 05	   *	    je	@C001E
 0000030C  E8 0000030C					call appendReversed
						.endif
 00000311		   *@C001E:
 00000311  EB DF				jmp colLoop
 00000313			innerDone:
 00000313  E8 00000289			call transferArray
 00000318  61				popad
 00000319  46				inc esi
 0000031A  EB 9D			jmp rowLoop
 0000031C			done:
 0000031C  C3				ret
 0000031D			ShiftRight ENDP

 0000031D			ShiftUp PROC
 0000031D  BE 00000000			mov esi, 0
 00000322			rowLoop:
 00000322  83 FE 04			cmp esi, rowH
 00000325  74 5F			je done
 00000327  60				pushad
 00000328  C7 05 00000040 R		mov shiftArray[0], emptyVal
	   00000000
 00000332  C7 05 00000044 R		mov shiftArray[4], emptyVal
	   00000000
 0000033C  C7 05 00000048 R		mov shiftArray[8], emptyVal
	   00000000
 00000346  C7 05 0000004C R		mov shiftArray[12], emptyVal
	   00000000
 00000350  89 35 0000003C R		mov rowIdx, esi
 00000356  BE 00000000			mov esi, 0
 0000035B				colLoop:
 0000035B  83 FE 04				cmp esi, rowH
 0000035E  74 1D				je innerDone
 00000360  8B C6				mov eax, esi
 00000362  03 C0				add eax, eax
 00000364  03 C0				add eax, eax
 00000366  03 05 0000003C R			add eax, rowIdx
						.if cellVals[eax] != emptyVal
 0000036C  80 B8 0000002A R
	   00		   *	    cmp    cellVals + [eax], emptyVal
 00000373  74 05	   *	    je	@C0020
 00000375  E8 00000279					call append
						.endif
 0000037A		   *@C0020:
 0000037A  46					inc esi
 0000037B  EB DE			jmp colLoop
 0000037D			innerDone:
 0000037D  E8 00000248			call transferTransposedArray
 00000382  61				popad
 00000383  46				inc esi
 00000384  EB 9C			jmp rowLoop
 00000386			done:
 00000386  C3				ret
 00000387			ShiftUp ENDP

 00000387			SetColors PROC
 00000387  8B F1			mov esi,ecx
 00000389  B9 00000010			mov ecx,numCell
 0000038E				NewColor:
 0000038E  8B D9				mov ebx,ecx
 00000390  B9 00000008				mov ecx,8
						.if cellVals[ebx] == emptyVal
 00000395  80 BB 0000002A R
	   00		   *	    cmp    cellVals + [ebx], emptyVal
 0000039C  75 07	   *	    jne    @C0022
 0000039E  C6 83 0000001A R				mov cellColors[ebx], emptyCol
	   08
						.endif
 000003A5		   *@C0022:
 000003A5					ColorCheck:
 000003A5  8A 81 00000011 R				mov al,vals[ecx]
							.if cellVals[ebx] == al
 000003AB  38 83 0000002A R *	    cmp    cellVals + [ebx], al
 000003B1  75 0C	   *	    jne    @C0024
 000003B3  8A 91 00000008 R					mov dl,colors[ecx]
 000003B9  88 93 0000001A R					mov cellColors[ebx],dl
							.endif
 000003BF		   *@C0024:
 000003BF  E2 E4				Loop ColorCheck
 000003C1  8B CB				mov ecx,ebx
 000003C3  E2 C9			Loop NewColor

					.if cellVals[numCell] == emptyVal
 000003C5  80 3D 0000003A R
	   00		   *	    cmp    cellVals + [numCell], emptyVal
 000003CC  75 09	   *	    jne    @C0026
 000003CE  C6 05 0000001A R			mov cellColors[0],emptyCol
	   08
					.elseif cellVals[0] == 2
 000003D5  EB 15	   *	    jmp    @C0028
 000003D7		   *@C0026:
 000003D7  80 3D 0000002A R
	   02		   *	    cmp    cellVals + [000h], 002h
 000003DE  75 0C	   *	    jne    @C0029
 000003E0  8A 15 00000009 R			mov dl,colors[1]
 000003E6  88 15 0000001A R			mov cellColors[0],dl
					.endif
 000003EC		   *@C0029:
 000003EC		   *@C0028:

 000003EC  8B CE			mov ecx,esi
 000003EE  C3				ret
 000003EF			SetColors ENDP

 000003EF			PrintBoard PROC
					INVOKE SetColors
 000003EF  E8 FFFFFF93	   *	    call   SetColors

 000003F4  B9 00000004			mov ecx,rowH
 000003F9				L1:		; loop for printing row 1
						INVOKE PrintLine, 0
 000003F9  6A 00	   *	    push   +000000000h
 000003FB  E8 00000092	   *	    call   PrintLine
 00000400  E8 00000000 E			call Crlf
 00000405  E2 F2			loop L1

 00000407  B9 00000004			mov ecx,rowH
 0000040C				L2:		; loop for printing row 2
						INVOKE PrintLine, 4
 0000040C  6A 04	   *	    push   +000000004h
 0000040E  E8 0000007F	   *	    call   PrintLine
 00000413  E8 00000000 E			call Crlf
 00000418  E2 F2			loop L2
					
 0000041A  B9 00000004			mov ecx,rowH
 0000041F				L3:		; loop for printing row 3
						INVOKE PrintLine, 8
 0000041F  6A 08	   *	    push   +000000008h
 00000421  E8 0000006C	   *	    call   PrintLine
 00000426  E8 00000000 E			call Crlf
 0000042B  E2 F2			loop L3

 0000042D  B9 00000004			mov ecx,rowH
 00000432				L4:		; loop for printing row 4
						INVOKE PrintLine, 12
 00000432  6A 0C	   *	    push   +00000000Ch
 00000434  E8 00000059	   *	    call   PrintLine
 00000439  E8 00000000 E			call Crlf
 0000043E  E2 F2			loop L4

				    INVOKE SetColor, black, black ; return to normal color
 00000440  6A 00	   *	    push   +000000000h
 00000442  6A 00	   *	    push   +000000000h
 00000444  E8 00000139	   *	    call   SetColor
 00000449  E8 00000000 E	    call Crlf
 0000044E  C3				ret
 0000044F			PrintBoard ENDP

 0000044F			RandomCell PROC
 0000044F  C6 05 00000071 R		mov putCell, 0
	   00
					.repeat
 00000456		   *@C002B:
 00000456  B8 00000010				mov eax,numCell
 0000045B  E8 00000000 E			call RandomRange
 00000460  A3 00000004 R			mov ranCell,eax

 00000465  A1 00000004 R			mov eax, ranCell

						.if cellVals[eax] == emptyVal
 0000046A  80 B8 0000002A R
	   00		   *	    cmp    cellVals + [eax], emptyVal
 00000471  75 15	   *	    jne    @C002C
 00000473  FE 05 00000071 R				inc putCell
 00000479  8D 35 0000002A R				lea esi,cellVals			; adds tile color to random cell
 0000047F  03 35 00000004 R				add esi,ranCell
 00000485  C6 06 02					mov BYTE PTR [esi],2
						.endif
						
					.until putCell == 1
 00000488		   *@C002C:
 00000488  80 3D 00000071 R
	   01		   *	    cmp    putCell, 001h
 0000048F  75 C5	   *	    jne    @C002B
 00000491  C3				ret
 00000492			RandomCell ENDP

 00000492			PrintLine PROC idx:BYTE
 00000492  55		   *	    push   ebp
 00000493  8B EC	   *	    mov    ebp, esp
 00000495  0F B6 55 08			movzx edx, idx
 00000499  8B F1			mov esi,ecx

 0000049B  BF 00000000			mov edi,0
 000004A0  B9 00000004			mov ecx,rowH
 000004A5				PrintLoop:
						INVOKE WriteColorChar, ' ', emptyCol, cellColors[edx+edi]
 000004A5  8A 84 17
	   0000001A R	   *	    mov    al, cellColors[edi+edx]
 000004AC  50		   *	    push   eax
 000004AD  6A 08	   *	    push   +000000008h
 000004AF  6A 20	   *	    push   +000000020h
 000004B1  E8 0000006F	   *	    call   WriteColorChar

						.if cellVals[edx+edi] != emptyVal && esi==1
 000004B6  80 BC 17
	   0000002A R 00   *	    cmp    cellVals + [edx + edi], emptyVal
 000004BE  74 4B	   *	    je	@C002F
 000004C0  83 FE 01	   *	    cmp    esi, 001h
 000004C3  75 46	   *	    jne    @C002F
 000004C5  B8 00000000					mov eax,0
 000004CA  BB 00000000					mov ebx,0
 000004CF  8A 84 17					mov al,cellVals[edx+edi]
	   0000002A R
 000004D6  B3 01					mov bl,TYPE cellVals[edx+edi]
 000004D8  E8 00000000 E				call WriteHexB

							INVOKE SetColor, emptyCol, cellColors[edx+edi]
 000004DD  8A 84 17
	   0000001A R	   *	    mov    al, cellColors[edi+edx]
 000004E4  50		   *	    push   eax
 000004E5  6A 08	   *	    push   +000000008h
 000004E7  E8 00000096	   *	    call   SetColor
 000004EC  B0 20					mov al, ' '
 000004EE  E8 00000000 E				call WriteChar
							INVOKE SetColor, emptyCol, cellColors[edx+edi]
 000004F3  8A 84 17
	   0000001A R	   *	    mov    al, cellColors[edi+edx]
 000004FA  50		   *	    push   eax
 000004FB  6A 08	   *	    push   +000000008h
 000004FD  E8 00000080	   *	    call   SetColor
 00000502  B0 20					mov al, ' '
 00000504  E8 00000000 E				call WriteChar

						.else
 00000509  EB 11	   *	    jmp    @C0032
 0000050B		   *@C002F:
							INVOKE WriteColorChar, ' ', emptyCol, cellColors[edx+edi]
 0000050B  8A 84 17
	   0000001A R	   *	    mov    al, cellColors[edi+edx]
 00000512  50		   *	    push   eax
 00000513  6A 08	   *	    push   +000000008h
 00000515  6A 20	   *	    push   +000000020h
 00000517  E8 00000009	   *	    call   WriteColorChar
						.endif
 0000051C		   *@C0032:

 0000051C  47					inc edi
 0000051D  E2 86			loop PrintLoop

 0000051F  8B CE			mov ecx,esi
				    ret
 00000521  C9		   *	    leave  
 00000522  C2 0004	   *	    ret    00004h
 00000525			PrintLine ENDP

 00000525			WriteColorChar PROC USES eax, char:BYTE, forecolor:BYTE, backcolor:BYTE 
 00000525  55		   *	    push   ebp
 00000526  8B EC	   *	    mov    ebp, esp
 00000528  50		   *	    push   eax
				    INVOKE SetColor, forecolor, backcolor
 00000529  8A 45 10	   *	    mov    al, byte  ptr ss:[ebp]+010h
 0000052C  50		   *	    push   eax
 0000052D  8A 45 0C	   *	    mov    al, byte  ptr ss:[ebp]+00Ch
 00000530  50		   *	    push   eax
 00000531  E8 0000004C	   *	    call   SetColor
 00000536  8A 45 08		    mov al, char
 00000539  E8 00000000 E	    call WriteChar
					INVOKE SetColor, forecolor, backcolor
 0000053E  8A 45 10	   *	    mov    al, byte  ptr ss:[ebp]+010h
 00000541  50		   *	    push   eax
 00000542  8A 45 0C	   *	    mov    al, byte  ptr ss:[ebp]+00Ch
 00000545  50		   *	    push   eax
 00000546  E8 00000037	   *	    call   SetColor
 0000054B  8A 45 08		    mov al, char
 0000054E  E8 00000000 E	    call WriteChar
					INVOKE SetColor, forecolor, backcolor
 00000553  8A 45 10	   *	    mov    al, byte  ptr ss:[ebp]+010h
 00000556  50		   *	    push   eax
 00000557  8A 45 0C	   *	    mov    al, byte  ptr ss:[ebp]+00Ch
 0000055A  50		   *	    push   eax
 0000055B  E8 00000022	   *	    call   SetColor
 00000560  8A 45 08		    mov al, char
 00000563  E8 00000000 E	    call WriteChar
					INVOKE SetColor, forecolor, backcolor
 00000568  8A 45 10	   *	    mov    al, byte  ptr ss:[ebp]+010h
 0000056B  50		   *	    push   eax
 0000056C  8A 45 0C	   *	    mov    al, byte  ptr ss:[ebp]+00Ch
 0000056F  50		   *	    push   eax
 00000570  E8 0000000D	   *	    call   SetColor
 00000575  8A 45 08		    mov al, char
 00000578  E8 00000000 E	    call WriteChar
				    ret
 0000057D  58		   *	    pop    eax
 0000057E  C9		   *	    leave  
 0000057F  C2 000C	   *	    ret    0000Ch
 00000582			WriteColorChar ENDP

 00000582			SetColor PROC, forecolor:BYTE, backcolor:BYTE
 00000582  55		   *	    push   ebp
 00000583  8B EC	   *	    mov    ebp, esp
 00000585  60				pushad
 00000586  0F B6 45 0C			movzx eax, backcolor
 0000058A  BB 00000010			mov ebx, numCell
 0000058F  F7 E3			mul ebx
 00000591  0F B6 5D 08			movzx ebx, forecolor
 00000595  03 C3			add eax, ebx
 00000597  E8 00000000 E		call SetTextColor       ; from Irvine32.lib
 0000059C  61				popad
				    ret
 0000059D  C9		   *	    leave  
 0000059E  C2 0008	   *	    ret    00008h
 000005A1			SetColor ENDP

 000005A1			transferArray PROC
 000005A1  60				pushad
 000005A2  B9 00000004			mov ecx, rowH
 000005A7  BE 00000000			mov esi, 0
 000005AC				fill:
 000005AC  8B 14 B5				mov edx, shiftArray[esi*rowH]
	   00000040 R
 000005B3  8B 1D 0000003C R			mov ebx, rowIdx
 000005B9  03 DB				add ebx, ebx
 000005BB  03 DB				add ebx, ebx
 000005BD  03 DE				add ebx, esi
 000005BF  88 93 0000002A R			mov cellVals[ebx], dl
 000005C5  46					inc esi
 000005C6  E2 E4			loop fill
 000005C8  61				popad
 000005C9  C3				ret
 000005CA			transferArray ENDP

 000005CA			transferTransposedArray PROC
 000005CA  60				pushad
 000005CB  B9 00000004			mov ecx, rowH
 000005D0  BE 00000000			mov esi, 0
 000005D5				fill:
 000005D5  8B 14 B5				mov edx, shiftArray[esi*rowH]
	   00000040 R
 000005DC  8B DE				mov ebx, esi
 000005DE  03 DB				add ebx, ebx
 000005E0  03 DB				add ebx, ebx
 000005E2  03 1D 0000003C R			add ebx, rowIdx
 000005E8  88 93 0000002A R			mov cellVals[ebx], dl
 000005EE  46					inc esi
 000005EF  E2 E4			loop fill
 000005F1  61				popad
 000005F2  C3				ret
 000005F3			transferTransposedArray ENDP

 000005F3			append PROC
 000005F3  60				pushad
 000005F4  B9 00000004			mov ecx, rowH
 000005F9  BE 00000000			mov esi, 0
 000005FE				appendValue:
						.if shiftArray[esi*rowH] == emptyVal
 000005FE  83 3C B5
	   00000040 R 00   *	    cmp    shiftArray + [esi * rowH], emptyVal
 00000606  75 10	   *	    jne    @C0033
 00000608  0F B6 98					movzx ebx, cellVals[eax]
	   0000002A R
 0000060F  89 1C B5					mov shiftArray[esi*rowH], ebx
	   00000040 R
 00000616  EB 03					jmp outOfLoop
						.endif
 00000618		   *@C0033:
 00000618  46					inc esi
 00000619  E2 E3			loop appendValue
 0000061B				outOfLoop:
 0000061B  61				popad
 0000061C  C3				ret
 0000061D			append ENDP

 0000061D			appendReversed PROC
 0000061D  60				pushad
 0000061E  BE 00000004			mov esi, rowH
 00000623				appendValue:
 00000623  83 FE 00				cmp esi, 0
 00000626  74 1D				je outOfLoop
 00000628  4E					dec esi
						.if shiftArray[esi*rowH] == emptyVal
 00000629  83 3C B5
	   00000040 R 00   *	    cmp    shiftArray + [esi * rowH], emptyVal
 00000631  75 10	   *	    jne    @C0035
 00000633  0F B6 98					movzx ebx, cellVals[eax]
	   0000002A R
 0000063A  89 1C B5					mov shiftArray[esi*rowH], ebx
	   00000040 R
 00000641  EB 02					jmp outOfLoop
						.endif
 00000643		   *@C0035:
 00000643  E2 DE			loop appendValue
 00000645				outOfLoop:
 00000645  61				popad
 00000646  C3				ret
 00000647			appendReversed ENDP

				END MAIN
Microsoft (R) Macro Assembler Version 14.10.25019.0	    12/11/17 20:41:23
2048			(2048.asm			     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000072 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000647 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MergeDown  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MergeLeft  . . . . . . . . . . .	P Near	 0000009E _TEXT	Length= 000000A1 Public STDCALL
  rowLoop  . . . . . . . . . . .	L Near	 000000A3 _TEXT	
  colLoop  . . . . . . . . . . .	L Near	 000000B8 _TEXT	
  LeftLoop . . . . . . . . . . .	L Near	 000000DD _TEXT	
  innerDone  . . . . . . . . . .	L Near	 00000137 _TEXT	
  done . . . . . . . . . . . . .	L Near	 0000013E _TEXT	
MergeRight . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MergeUp  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MergeVertical  . . . . . . . . .	P Near	 0000013F _TEXT	Length= 000000A2 Public STDCALL
  rowLoop  . . . . . . . . . . .	L Near	 00000144 _TEXT	
  colLoop  . . . . . . . . . . .	L Near	 00000159 _TEXT	
  VertLoop . . . . . . . . . . .	L Near	 0000017F _TEXT	
  innerDone  . . . . . . . . . .	L Near	 000001D9 _TEXT	
  done . . . . . . . . . . . . .	L Near	 000001E0 _TEXT	
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintBoard . . . . . . . . . . .	P Near	 000003EF _TEXT	Length= 00000060 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000003F9 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 0000040C _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 0000041F _TEXT	
  L4 . . . . . . . . . . . . . .	L Near	 00000432 _TEXT	
PrintLine  . . . . . . . . . . .	P Near	 00000492 _TEXT	Length= 00000093 Public STDCALL
  idx  . . . . . . . . . . . . .	Byte	 bp + 00000008
  PrintLoop  . . . . . . . . . .	L Near	 000004A5 _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomCell . . . . . . . . . . .	P Near	 0000044F _TEXT	Length= 00000043 Public STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetColors  . . . . . . . . . . .	P Near	 00000387 _TEXT	Length= 00000068 Public STDCALL
  NewColor . . . . . . . . . . .	L Near	 0000038E _TEXT	
  ColorCheck . . . . . . . . . .	L Near	 000003A5 _TEXT	
SetColor . . . . . . . . . . . .	P Near	 00000582 _TEXT	Length= 0000001F Public STDCALL
  forecolor  . . . . . . . . . .	Byte	 bp + 00000008
  backcolor  . . . . . . . . . .	Byte	 bp + 0000000C
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShiftDown  . . . . . . . . . . .	P Near	 0000024A _TEXT	Length= 0000006A Public STDCALL
  rowLoop  . . . . . . . . . . .	L Near	 0000024F _TEXT	
  colLoop  . . . . . . . . . . .	L Near	 00000288 _TEXT	
  innerDone  . . . . . . . . . .	L Near	 000002AA _TEXT	
  done . . . . . . . . . . . . .	L Near	 000002B3 _TEXT	
ShiftLeft  . . . . . . . . . . .	P Near	 000001E1 _TEXT	Length= 00000069 Public STDCALL
  rowLoop  . . . . . . . . . . .	L Near	 000001E6 _TEXT	
  colLoop  . . . . . . . . . . .	L Near	 0000021F _TEXT	
  innerDone  . . . . . . . . . .	L Near	 00000240 _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000249 _TEXT	
ShiftRight . . . . . . . . . . .	P Near	 000002B4 _TEXT	Length= 00000069 Public STDCALL
  rowLoop  . . . . . . . . . . .	L Near	 000002B9 _TEXT	
  colLoop  . . . . . . . . . . .	L Near	 000002F2 _TEXT	
  innerDone  . . . . . . . . . .	L Near	 00000313 _TEXT	
  done . . . . . . . . . . . . .	L Near	 0000031C _TEXT	
ShiftUp  . . . . . . . . . . . .	P Near	 0000031D _TEXT	Length= 0000006A Public STDCALL
  rowLoop  . . . . . . . . . . .	L Near	 00000322 _TEXT	
  colLoop  . . . . . . . . . . .	L Near	 0000035B _TEXT	
  innerDone  . . . . . . . . . .	L Near	 0000037D _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000386 _TEXT	
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
TakeInput  . . . . . . . . . . .	P Near	 0000002D _TEXT	Length= 00000071 Public STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteColorChar . . . . . . . . .	P Near	 00000525 _TEXT	Length= 0000005D Public STDCALL
  char . . . . . . . . . . . . .	Byte	 bp + 00000008
  forecolor  . . . . . . . . . .	Byte	 bp + 0000000C
  backcolor  . . . . . . . . . .	Byte	 bp + 00000010
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
appendReversed . . . . . . . . .	P Near	 0000061D _TEXT	Length= 0000002A Public STDCALL
  appendValue  . . . . . . . . .	L Near	 00000623 _TEXT	
  outOfLoop  . . . . . . . . . .	L Near	 00000645 _TEXT	
append . . . . . . . . . . . . .	P Near	 000005F3 _TEXT	Length= 0000002A Public STDCALL
  appendValue  . . . . . . . . .	L Near	 000005FE _TEXT	
  outOfLoop  . . . . . . . . . .	L Near	 0000061B _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000002D Public STDCALL
  mainLoop . . . . . . . . . . .	L Near	 0000000A _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000026 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
transferArray  . . . . . . . . .	P Near	 000005A1 _TEXT	Length= 00000029 Public STDCALL
  fill . . . . . . . . . . . . .	L Near	 000005AC _TEXT	
transferTransposedArray  . . . .	P Near	 000005CA _TEXT	Length= 00000029 Public STDCALL
  fill . . . . . . . . . . . . .	L Near	 000005D5 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cellColors . . . . . . . . . . .	Byte	 0000001A _DATA	
cellVals . . . . . . . . . . . .	Byte	 0000002A _DATA	
colIndex . . . . . . . . . . . .	DWord	 00000050 _DATA	
colors . . . . . . . . . . . . .	Byte	 00000008 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
emptyCol . . . . . . . . . . . .	Number	 00000008h   
emptyVal . . . . . . . . . . . .	Number	 00000000h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gameOver . . . . . . . . . . . .	Byte	 00000070 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
key  . . . . . . . . . . . . . .	Byte	 0000003B _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
loops  . . . . . . . . . . . . .	Number	 00000002h   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numCell  . . . . . . . . . . . .	Number	 00000010h   
putCell  . . . . . . . . . . . .	Byte	 00000071 _DATA	
ranCell  . . . . . . . . . . . .	DWord	 00000004 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rowH . . . . . . . . . . . . . .	Number	 00000004h   
rowIdx . . . . . . . . . . . . .	DWord	 0000003C _DATA	
shiftArray . . . . . . . . . . .	DWord	 00000040 _DATA	
shiftDirection . . . . . . . . .	Byte	 0000003A _DATA	
vals . . . . . . . . . . . . . .	Byte	 00000011 _DATA	
valueB . . . . . . . . . . . . .	DWord	 00000000 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
winString  . . . . . . . . . . .	Byte	 00000054 _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
