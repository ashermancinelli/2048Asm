Microsoft (R) Macro Assembler Version 14.00.24210.0	    12/12/17 13:24:50
2048			(2048.asm			     Page 1 - 1


				   TITLE 2048			(2048.asm)

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				; procedure prototypes:
				SetColor PROTO forecolor:BYTE, backcolor: BYTE
				WriteColorChar PROTO char:BYTE, forecolor:BYTE, backcolor:BYTE
				PrintLine PROTO idx:BYTE
				PrintBoard PROTO
				RandomCell PROTO
				TakeInput PROTO
				ShiftLeft PROTO
				ShiftRight PROTO
				ShiftDown PROTO
				ShiftUp PROTO
				MergeUp PROTO
				MergeDown PROTO
				MergeRight PROTO
				MergeLeft PROTO

 00000000			.data
 = 00000004			rows = 4
 = 00000004			columns = 4
 = 00000004			rowH = 4
 00000000 00000000		ranCell DWORD ?
 = 00000002			loops = 2

				; these are the EQU constants which define the colors we work with 
				;---------------------------------------------------------;
 = 0000000B			color1 = 11		; light blue = 2
 = 00000009			color2 = 9		; dark blue = 4
 = 00000005			color3 = 5		; purple = 8
 = 00000001			color4 = 1		; dark purple = 16
 = 0000000C			color5 = 12		; red = 32
 = 00000002			color6 = 2
 = 00000004			color7 = 4	
 = 00000008			color8 = 8	
 = 00000007			empty = 7		; gray
 = 00000008			empty2 = 8		; dark gray
				;---------------------------------------------------------;

 00000004 07 0B 07 07 07	cellColors BYTE	7,11,7,7,
	   07 07 07 07 07
	   0B 07 07 07 07
	   07
								7,7,7,7,
								7,7,11,7,
								7,7,7,7		; initializes cell colors to default
 00000014 00000000		cellVals DWORD	0,2,0,0,
	   00000002
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000002
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
								0,0,0,0,
								0,0,2,0,
								0,0,0,0		; initializes cell values to default
 00000054 00			shiftDirection BYTE ?
 00000055 00			key BYTE ?
 00000056 00000000		rowIdx DWORD ?
 0000005A 00000007		shiftArray DWORD 7,7,7,7
	   00000007
	   00000007
	   00000007
 0000006A 00000000		colIndex DWORD ?
 0000006E 43 6F 6E 67 72	winString BYTE "Congradulations! YOU WON!!!", 0h
	   61 64 75 6C 61
	   74 69 6F 6E 73
	   21 20 59 4F 55
	   20 57 4F 4E 21
	   21 21 00
 0000008A 00			gameOver BYTE 0

 0000008B 00			putCell BYTE 0

 00000000			.code
 00000000			main PROC
 00000000  E8 00000000 E		call Randomize
 00000005  E8 000004A6			call PrintBoard

				; this is teh mainloop which defines what runs every time the user enters a key
 0000000A			mainLoop:

 0000000A  E8 00000023			call TakeInput
					; this is used as a flag, like a psuedo boolean type, to determine if the gaem was over or not
					.if gameOver == 1
 0000000F  80 3D 0000008A R
	   01		   *	    cmp    gameOver, 001h
 00000016  75 02	   *	    jne    @C0001
 00000018  EB 11				jmp done
					.endif
 0000001A		   *@C0001:

					; this inserts a cell at a random, not already taken cell
 0000001A  E8 000004EC			call RandomCell

 0000001F  E8 00000000 E		call Clrscr

					; this prints out the board with the updated values
 00000024  E8 00000487			call PrintBoard
 00000029  E2 DF			loop mainLoop

 0000002B			done:

				    exit
 0000002B  6A 00	   *	    push   +000000000h
 0000002D  E8 00000000 E   *	    call   ExitProcess
 00000032			main ENDP

				; This procedure waits for input from the user, and upon input, calls the appropriate 
				; procedures to reflect the move in our model of the game, and then the view part of the game 
				; will be updated by the p rint board function in the mainloop.
 00000032			TakeInput PROC
 00000032  E8 00000000 E		call ReadChar
 00000037  A2 00000055 R		mov key,al
					.if key == 97				
 0000003C  80 3D 00000055 R
	   61		   *	    cmp    key, 061h
 00000043  75 11	   *	    jne    @C0003
 00000045  E8 000002C0				call ShiftLeft
 0000004A  E8 00000054				call MergeLeft
 0000004F  E8 000002B6				call ShiftLeft
					.elseif key == 115			
 00000054  EB 4C	   *	    jmp    @C0005
 00000056		   *@C0003:
 00000056  80 3D 00000055 R
	   73		   *	    cmp    key, 073h
 0000005D  75 11	   *	    jne    @C0006
 0000005F  E8 0000030F				call ShiftDown
 00000064  E8 0000016D				call MergeVertical
 00000069  E8 00000305				call ShiftDown
					.elseif key == 100			
 0000006E  EB 32	   *	    jmp    @C0008
 00000070		   *@C0006:
 00000070  80 3D 00000055 R
	   64		   *	    cmp    key, 064h
 00000077  75 11	   *	    jne    @C0009
 00000079  E8 0000035F				call ShiftRight
 0000007E  E8 00000020				call MergeLeft
 00000083  E8 00000355				call ShiftRight
					.elseif key == 119			
 00000088  EB 18	   *	    jmp    @C000B
 0000008A		   *@C0009:
 0000008A  80 3D 00000055 R
	   77		   *	    cmp    key, 077h
 00000091  75 0F	   *	    jne    @C000C
 00000093  E8 000003AE				call ShiftUp
 00000098  E8 00000139				call MergeVertical
 0000009D  E8 000003A4				call ShiftUp
					.endif
 000000A2		   *@C000C:
 000000A2		   *@C000B:
 000000A2		   *@C0008:
 000000A2		   *@C0005:
 000000A2  C3				ret
 000000A3			TakeInput ENDP


				; Although we named this as mergeLEFT, this works to merge any horizontal direction, and is called as such.
				; becuase we shift, merge, then shift again, it does not matter whehter we call a merge left or right.
 000000A3			MergeLeft PROC
 000000A3  BE 00000000			mov esi, 0
 000000A8			rowLoop:
 000000A8  83 FE 04			cmp esi, 4
 000000AB  0F 84 00000124		je done
 000000B1  60				pushad

 000000B2  89 35 00000056 R		mov rowIdx, esi
 000000B8  BE 00000000			mov esi, 0
 000000BD				colLoop:
 000000BD  83 FE 03				cmp esi, 3
 000000C0  0F 84 00000108			je innerDone

 000000C6  A1 00000056 R			mov eax, rowIdx
 000000CB  03 C0				add eax, eax
 000000CD  03 C0				add eax, eax
 000000CF  03 C6				add eax, esi

 000000D1  8A 98 00000005 R			mov bl, cellColors[eax+1]
						.if cellColors[eax] == bl	;cellColors[eax+1]
 000000D7  38 98 00000004 R *	    cmp    cellColors + [eax], bl
 000000DD  0F 85 000000E5  *	    jne    @C000E
							.if cellColors[eax] == color1
 000000E3  80 B8 00000004 R
	   0B		   *	    cmp    cellColors + [eax], color1
 000000EA  75 13	   *	    jne    @C0010
 000000EC  C6 80 00000004 R					mov cellColors[eax], color2
	   09
 000000F3  C6 80 00000005 R					mov cellColors[eax+1], 7
	   07
							.elseif cellColors[eax] == color2
 000000FA  E9 000000C9	   *	    jmp    @C0012
 000000FF		   *@C0010:
 000000FF  80 B8 00000004 R
	   09		   *	    cmp    cellColors + [eax], color2
 00000106  75 13	   *	    jne    @C0013
 00000108  C6 80 00000004 R					mov cellColors[eax], color3
	   05
 0000010F  C6 80 00000005 R					mov cellColors[eax+1], 7
	   07
							.elseif cellColors[eax] == color3
 00000116  E9 000000AD	   *	    jmp    @C0015
 0000011B		   *@C0013:
 0000011B  80 B8 00000004 R
	   05		   *	    cmp    cellColors + [eax], color3
 00000122  75 13	   *	    jne    @C0016
 00000124  C6 80 00000004 R					mov cellColors[eax], color4
	   01
 0000012B  C6 80 00000005 R					mov cellColors[eax+1], 7
	   07
							.elseif cellColors[eax] == color4
 00000132  E9 00000091	   *	    jmp    @C0018
 00000137		   *@C0016:
 00000137  80 B8 00000004 R
	   01		   *	    cmp    cellColors + [eax], color4
 0000013E  75 10	   *	    jne    @C0019
 00000140  C6 80 00000004 R					mov cellColors[eax], color5
	   0C
 00000147  C6 80 00000005 R					mov cellColors[eax+1], 7
	   07
							.elseif cellColors[eax] == color5
 0000014E  EB 78	   *	    jmp    @C001B
 00000150		   *@C0019:
 00000150  80 B8 00000004 R
	   0C		   *	    cmp    cellColors + [eax], color5
 00000157  75 10	   *	    jne    @C001C
 00000159  C6 80 00000004 R					mov cellColors[eax], color6
	   02
 00000160  C6 80 00000005 R					mov cellColors[eax+1], 7
	   07
							.elseif cellColors[eax] == color6
 00000167  EB 5F	   *	    jmp    @C001E
 00000169		   *@C001C:
 00000169  80 B8 00000004 R
	   02		   *	    cmp    cellColors + [eax], color6
 00000170  75 10	   *	    jne    @C001F
 00000172  C6 80 00000004 R					mov cellColors[eax], color7
	   04
 00000179  C6 80 00000005 R					mov cellColors[eax+1], 7
	   07
							.elseif cellColors[eax] == color7
 00000180  EB 46	   *	    jmp    @C0021
 00000182		   *@C001F:
 00000182  80 B8 00000004 R
	   04		   *	    cmp    cellColors + [eax], color7
 00000189  75 10	   *	    jne    @C0022
 0000018B  C6 80 00000004 R					mov cellColors[eax], color8
	   08
 00000192  C6 80 00000005 R					mov cellColors[eax+1], 7
	   07
							.elseif cellColors[eax] == color8
 00000199  EB 2D	   *	    jmp    @C0024
 0000019B		   *@C0022:
 0000019B  80 B8 00000004 R
	   08		   *	    cmp    cellColors + [eax], color8
 000001A2  75 24	   *	    jne    @C0025
								invoke SetColor, white, black
 000001A4  6A 00	   *	    push   +000000000h
 000001A6  6A 0F	   *	    push   +00000000Fh
 000001A8  E8 00000492	   *	    call   SetColor
 000001AD  E8 00000000 E					call clrscr
 000001B2  BA 0000006E R					mov edx, offset winString
 000001B7  E8 00000000 E					call WriteString
 000001BC  E8 00000000 E					call crlf
 000001C1  C6 05 0000008A R					mov gameOver, 1
	   01
							.endif
						.endif
 000001C8		   *@C0025:
 000001C8		   *@C0024:
 000001C8		   *@C0021:
 000001C8		   *@C001E:
 000001C8		   *@C001B:
 000001C8		   *@C0018:
 000001C8		   *@C0015:
 000001C8		   *@C0012:
 000001C8		   *@C000E:

 000001C8  46					inc esi
 000001C9  E9 FFFFFEEF				jmp colLoop
 000001CE			innerDone:
 000001CE  61				popad
 000001CF  46				inc esi
 000001D0  E9 FFFFFED3			jmp rowLoop
 000001D5			done:
 000001D5  C3				ret
 000001D6			MergeLeft ENDP

				; like the merge left procedure, it does not matter whether we call merge up or merge down, so there is
				; only one function which we call for vertical movement.
 000001D6			MergeVertical PROC

 000001D6  BE 00000000			mov esi, 0
 000001DB			rowLoop:
 000001DB  83 FE 04			cmp esi, 4
 000001DE  0F 84 00000125		je done
 000001E4  60				pushad

 000001E5  89 35 0000006A R		mov colIndex, esi
 000001EB  BE 00000000			mov esi, 0
 000001F0				colLoop:
 000001F0  83 FE 03				cmp esi, 3
 000001F3  0F 84 00000109			je innerDone

 000001F9  8B C6				mov eax, esi
 000001FB  03 C0				add eax, eax
 000001FD  03 C0				add eax, eax
 000001FF  03 05 0000006A R			add eax, colIndex

 00000205  8A 98 00000008 R			mov bl, cellColors[eax+4]
						.if cellColors[eax] == bl	;cellColors[eax+4]
 0000020B  38 98 00000004 R *	    cmp    cellColors + [eax], bl
 00000211  0F 85 000000E5  *	    jne    @C0027
							.if cellColors[eax] == color1
 00000217  80 B8 00000004 R
	   0B		   *	    cmp    cellColors + [eax], color1
 0000021E  75 13	   *	    jne    @C0029
 00000220  C6 80 00000004 R					mov cellColors[eax], color2
	   09
 00000227  C6 80 00000008 R					mov cellColors[eax+4], 7
	   07
							.elseif cellColors[eax] == color2
 0000022E  E9 000000C9	   *	    jmp    @C002B
 00000233		   *@C0029:
 00000233  80 B8 00000004 R
	   09		   *	    cmp    cellColors + [eax], color2
 0000023A  75 13	   *	    jne    @C002C
 0000023C  C6 80 00000004 R					mov cellColors[eax], color3
	   05
 00000243  C6 80 00000008 R					mov cellColors[eax+4], 7
	   07
							.elseif cellColors[eax] == color3
 0000024A  E9 000000AD	   *	    jmp    @C002E
 0000024F		   *@C002C:
 0000024F  80 B8 00000004 R
	   05		   *	    cmp    cellColors + [eax], color3
 00000256  75 13	   *	    jne    @C002F
 00000258  C6 80 00000004 R					mov cellColors[eax], color4
	   01
 0000025F  C6 80 00000008 R					mov cellColors[eax+4], 7
	   07
							.elseif cellColors[eax] == color4
 00000266  E9 00000091	   *	    jmp    @C0031
 0000026B		   *@C002F:
 0000026B  80 B8 00000004 R
	   01		   *	    cmp    cellColors + [eax], color4
 00000272  75 10	   *	    jne    @C0032
 00000274  C6 80 00000004 R					mov cellColors[eax], color5
	   0C
 0000027B  C6 80 00000008 R					mov cellColors[eax+4], 7
	   07
							.elseif cellColors[eax] == color5
 00000282  EB 78	   *	    jmp    @C0034
 00000284		   *@C0032:
 00000284  80 B8 00000004 R
	   0C		   *	    cmp    cellColors + [eax], color5
 0000028B  75 10	   *	    jne    @C0035
 0000028D  C6 80 00000004 R					mov cellColors[eax], color6
	   02
 00000294  C6 80 00000008 R					mov cellColors[eax+4], 7
	   07
							.elseif cellColors[eax] == color6
 0000029B  EB 5F	   *	    jmp    @C0037
 0000029D		   *@C0035:
 0000029D  80 B8 00000004 R
	   02		   *	    cmp    cellColors + [eax], color6
 000002A4  75 10	   *	    jne    @C0038
 000002A6  C6 80 00000004 R					mov cellColors[eax], color7
	   04
 000002AD  C6 80 00000008 R					mov cellColors[eax+4], 7
	   07
							.elseif cellColors[eax] == color7
 000002B4  EB 46	   *	    jmp    @C003A
 000002B6		   *@C0038:
 000002B6  80 B8 00000004 R
	   04		   *	    cmp    cellColors + [eax], color7
 000002BD  75 10	   *	    jne    @C003B
 000002BF  C6 80 00000004 R					mov cellColors[eax], color8
	   08
 000002C6  C6 80 00000008 R					mov cellColors[eax+4], 7
	   07
							.elseif cellColors[eax] == color8
 000002CD  EB 2D	   *	    jmp    @C003D
 000002CF		   *@C003B:
 000002CF  80 B8 00000004 R
	   08		   *	    cmp    cellColors + [eax], color8
 000002D6  75 24	   *	    jne    @C003E
								invoke SetColor, white, black
 000002D8  6A 00	   *	    push   +000000000h
 000002DA  6A 0F	   *	    push   +00000000Fh
 000002DC  E8 0000035E	   *	    call   SetColor
 000002E1  E8 00000000 E					call clrscr
 000002E6  BA 0000006E R					mov edx, offset winString
 000002EB  E8 00000000 E					call WriteString
 000002F0  E8 00000000 E					call crlf
 000002F5  C6 05 0000008A R					mov gameOver, 1
	   01
							.endif
						.endif
 000002FC		   *@C003E:
 000002FC		   *@C003D:
 000002FC		   *@C003A:
 000002FC		   *@C0037:
 000002FC		   *@C0034:
 000002FC		   *@C0031:
 000002FC		   *@C002E:
 000002FC		   *@C002B:
 000002FC		   *@C0027:

 000002FC  46					inc esi
 000002FD  E9 FFFFFEEE				jmp colLoop
 00000302			innerDone:
 00000302  61				popad
 00000303  46				inc esi
 00000304  E9 FFFFFED2			jmp rowLoop
 00000309			done:

 00000309  C3				ret
 0000030A			MergeVertical ENDP


				; This set of procedures are all the same in how they function, they just go in different 
				; directions. 
				;----------------------------------------------------------------------------;;
 0000030A			ShiftLeft PROC																  ;
 0000030A  BE 00000000			mov esi, 0																  ;
																							  ;
					; the loop will run 4 times, iterating over the four rows of the board	  ;
 0000030F			rowLoop:																	  ;
 0000030F  83 FE 04			cmp esi, 4																  ;
 00000312  74 5E			je done																	  ;
 00000314  60				pushad		
					; clears the array which holds the values of the board as they are shifted;
 00000315  C7 05 0000005A R		mov shiftArray[0], 7													  ;
	   00000007
 0000031F  C7 05 0000005E R		mov shiftArray[4], 7													  ;
	   00000007
 00000329  C7 05 00000062 R		mov shiftArray[8], 7													  ;
	   00000007
 00000333  C7 05 00000066 R		mov shiftArray[12], 7													  ;
	   00000007
 0000033D  89 35 00000056 R		mov rowIdx, esi															  ;
 00000343  BE 00000000			mov esi, 0																  ;
 00000348				colLoop:																  ;
 00000348  83 FE 04				cmp esi, 4															  ;
 0000034B  74 1C				je innerDone														  ;
 0000034D  A1 00000056 R			mov eax, rowIdx														  ;
 00000352  03 C0				add eax, eax														  ;
 00000354  03 C0				add eax, eax														  ;
 00000356  03 C6				add eax, esi		
						; if the element of the board at the given point is not blank, then 
						; is appended to our shift arrray before being moved into the actual 
						; array. this functions to shift all the cells in the board in a 
						; given row to one direction.
						.if cellColors[eax] != 7											  ;
 00000358  80 B8 00000004 R
	   07		   *	    cmp    cellColors + [eax], 007h
 0000035F  74 05	   *	    je	@C0040
 00000361  E8 0000034A					call append														  ;
						.endif																  ;
 00000366		   *@C0040:
 00000366  46					inc esi																  ;
 00000367  EB DF				jmp colLoop															  ;
 00000369			innerDone:																	  ;
 00000369  E8 000002F0			call transferArray														  ;
 0000036E  61				popad																	  ;
 0000036F  46				inc esi																	  ;
 00000370  EB 9D			jmp rowLoop																  ;
 00000372			done:																		  ;
 00000372  C3				ret																		  ;
 00000373			ShiftLeft ENDP																  ;
								
				; this does the same thing as shift left, but instead of iteratng over teh 
				; rows of the board, it iterates over the columns to shift down.
 00000373			ShiftDown PROC																  ;
 00000373  BE 00000000			mov esi, 0																  ;
 00000378			rowLoop:																	  ;
 00000378  83 FE 04			cmp esi, 4																  ;
 0000037B  74 5F			je done																	  ;
 0000037D  60				pushad																	  ;
 0000037E  C7 05 0000005A R		mov shiftArray[0], 7													  ;
	   00000007
 00000388  C7 05 0000005E R		mov shiftArray[4], 7													  ;
	   00000007
 00000392  C7 05 00000062 R		mov shiftArray[8], 7													  ;
	   00000007
 0000039C  C7 05 00000066 R		mov shiftArray[12], 7													  ;
	   00000007
 000003A6  89 35 00000056 R		mov rowIdx, esi															  ;
 000003AC  BE 00000004			mov esi, 4																  ;
 000003B1				colLoop:																  ;
 000003B1  83 FE 00				cmp esi, 0															  ;
 000003B4  74 1D				je innerDone														  ;
 000003B6  4E					dec esi																  ;
						; eax = (4 * rowIdx) + esi											  ;
 000003B7  8B C6				mov eax, esi														  ;
 000003B9  03 C0				add eax, eax														  ;
 000003BB  03 C0				add eax, eax														  ;
 000003BD  03 05 00000056 R			add eax, rowIdx														  ;
						.if cellColors[eax] != 7											  ;
 000003C3  80 B8 00000004 R
	   07		   *	    cmp    cellColors + [eax], 007h
 000003CA  74 05	   *	    je	@C0042
 000003CC  E8 00000309					call appendReversed												  ;
						.endif																  ;
 000003D1		   *@C0042:
 000003D1  EB DE				jmp colLoop															  ;
 000003D3			innerDone:																	  ;
 000003D3  E8 000002AF			call transferTransposedArray											  ;
 000003D8  61				popad																	  ;
 000003D9  46				inc esi																	  ;
 000003DA  EB 9C			jmp rowLoop																  ;
 000003DC			done:																		  ;
 000003DC  C3				ret																		  ;
 000003DD			ShiftDown ENDP																  ;
																							  ;
				; same as the shift left procedure, but appends the cells and reprints 		  ;
				; them to the right instead of to the left.									  ;
 000003DD			ShiftRight PROC																  ;
 000003DD  BE 00000000			mov esi, 0																  ;
 000003E2			rowLoop:																	  ;
 000003E2  83 FE 04			cmp esi, 4																  ;
 000003E5  74 5E			je done																	  ;
 000003E7  60				pushad																	  ;
 000003E8  C7 05 0000005A R		mov shiftArray[0], 7													  ;
	   00000007
 000003F2  C7 05 0000005E R		mov shiftArray[4], 7													  ;
	   00000007
 000003FC  C7 05 00000062 R		mov shiftArray[8], 7													  ;
	   00000007
 00000406  C7 05 00000066 R		mov shiftArray[12], 7													  ;
	   00000007
 00000410  89 35 00000056 R		mov rowIdx, esi															  ;
 00000416  BE 00000004			mov esi, 4																  ;
 0000041B				colLoop:																  ;
 0000041B  83 FE 00				cmp esi, 0															  ;
 0000041E  74 1C				je innerDone														  ;
 00000420  4E					dec esi																  ;
						; eax = (4 * rowIdx) + esi											  ;
 00000421  A1 00000056 R			mov eax, rowIdx														  ;
 00000426  03 C0				add eax, eax														  ;
 00000428  03 C0				add eax, eax														  ;
 0000042A  03 C6				add eax, esi														  ;
						.if cellColors[eax] != 7											  ;
 0000042C  80 B8 00000004 R
	   07		   *	    cmp    cellColors + [eax], 007h
 00000433  74 05	   *	    je	@C0044
 00000435  E8 000002A0					call appendReversed												  ;
						.endif																  ;
 0000043A		   *@C0044:
 0000043A  EB DF				jmp colLoop															  ;
 0000043C			innerDone:																	  ;
 0000043C  E8 0000021D			call transferArray														  ;
 00000441  61				popad																	  ;
 00000442  46				inc esi																	  ;
 00000443  EB 9D			jmp rowLoop																  ;
 00000445			done:																		  ;
 00000445  C3				ret																		  ;
 00000446			ShiftRight ENDP																  ;
																							  ;
 00000446			ShiftUp PROC																  ;
 00000446  BE 00000000			mov esi, 0																  ;
 0000044B			rowLoop:																	  ;
 0000044B  83 FE 04			cmp esi, 4																  ;
 0000044E  74 5F			je done																	  ;
 00000450  60				pushad																	  ;
 00000451  C7 05 0000005A R		mov shiftArray[0], 7													  ;
	   00000007
 0000045B  C7 05 0000005E R		mov shiftArray[4], 7													  ;
	   00000007
 00000465  C7 05 00000062 R		mov shiftArray[8], 7													  ;
	   00000007
 0000046F  C7 05 00000066 R		mov shiftArray[12], 7													  ;
	   00000007
 00000479  89 35 00000056 R		mov rowIdx, esi															  ;
 0000047F  BE 00000000			mov esi, 0																  ;
 00000484				colLoop:																  ;
 00000484  83 FE 04				cmp esi, 4															  ;
 00000487  74 1D				je innerDone														  ;
 00000489  8B C6				mov eax, esi														  ;
 0000048B  03 C0				add eax, eax														  ;
 0000048D  03 C0				add eax, eax														  ;
 0000048F  03 05 00000056 R			add eax, rowIdx														  ;
						.if cellColors[eax] != 7											  ;
 00000495  80 B8 00000004 R
	   07		   *	    cmp    cellColors + [eax], 007h
 0000049C  74 05	   *	    je	@C0046
 0000049E  E8 0000020D					call append														  ;
						.endif																  ;
 000004A3		   *@C0046:
 000004A3  46					inc esi																  ;
 000004A4  EB DE				jmp colLoop															  ;
 000004A6			innerDone:																	  ;
 000004A6  E8 000001DC			call transferTransposedArray											  ;
 000004AB  61				popad																	  ;
 000004AC  46				inc esi																	  ;
 000004AD  EB 9C			jmp rowLoop																  ;
 000004AF			done:																		  ;
 000004AF  C3				ret																		  ;
 000004B0			ShiftUp ENDP																  ;
				;----------------------------------------------------------------------------;;

				; this iterates through all the elements of the board, printing them out with 
				; our custom print line procedure, which calls our custom set color and 
				; write colored char procedures
				;----------------------------------------------------------------------------;;
 000004B0			PrintBoard PROC																  ;
 000004B0  B9 00000004			mov ecx,rowH															  ;
 000004B5				L1:		; loop for printing row 1										  ;
					INVOKE PrintLine, 0														  ;
 000004B5  6A 00	   *	    push   +000000000h
 000004B7  E8 0000009B	   *	    call   PrintLine
 000004BC  E8 00000000 E	    call Crlf																  ;
 000004C1  E2 F2			loop L1																	  ;
																							  ;
 000004C3  B9 00000004			mov ecx,rowH															  ;
 000004C8				L2:		; loop for printing row 2										  ;
				    INVOKE PrintLine, 4														  ;
 000004C8  6A 04	   *	    push   +000000004h
 000004CA  E8 00000088	   *	    call   PrintLine
 000004CF  E8 00000000 E	    call Crlf																  ;
 000004D4  E2 F2			loop L2																	  ;
																							  ;
 000004D6  B9 00000004			mov ecx,rowH															  ;
 000004DB				L3:		; loop for printing row 3										  ;
					INVOKE PrintLine, 8														  ;
 000004DB  6A 08	   *	    push   +000000008h
 000004DD  E8 00000075	   *	    call   PrintLine
 000004E2  E8 00000000 E	    call Crlf																  ;
 000004E7  E2 F2			loop L3																	  ;
																							  ;
 000004E9  B9 00000004			mov ecx,rowH															  ;
 000004EE				L4:		; loop for printing row 4										  ;
				    INVOKE PrintLine, 12													  ;
 000004EE  6A 0C	   *	    push   +00000000Ch
 000004F0  E8 00000062	   *	    call   PrintLine
 000004F5  E8 00000000 E	    call Crlf																  ;
 000004FA  E2 F2			loop L4																	  ;
																							  ;
				    INVOKE SetColor, black, black ; return to normal color					  ;
 000004FC  6A 00	   *	    push   +000000000h
 000004FE  6A 00	   *	    push   +000000000h
 00000500  E8 0000013A	   *	    call   SetColor
 00000505  E8 00000000 E	    call Crlf																  ;
 0000050A  C3				ret																		  ;
 0000050B			PrintBoard ENDP																  ;
				;----------------------------------------------------------------------------;;

				; this repeates a loop which continually generates random cells until it 
				; finds an empty cell, and places it there in our model. 
				;----------------------------------------------------------------------------;
 0000050B			RandomCell PROC																 ;
 0000050B  C6 05 0000008B R		mov putCell, 0															 ;
	   00
					.repeat																	 ;
 00000512		   *@C0048:
 00000512  B8 00000010				mov eax,16															 ;
 00000517  E8 00000000 E			call RandomRange													 ;
 0000051C  A3 00000000 R			mov ranCell,eax														 ;
																							 ;
 00000521  A1 00000000 R			mov eax, ranCell													 ;
																							 ;
						; tests to see if the cell it's looking at is already taken 		 ;
						; by another cell, if not, it will loop again. If so, 				 ;
						; the loop will terminate.											 ;
						.if cellColors[eax] == 7 || cellColors[eax] == 8 					 ;
 00000526  80 B8 00000004 R
	   07		   *	    cmp    cellColors + [eax], 007h
 0000052D  74 09	   *	    je	@C004A
 0000052F  80 B8 00000004 R
	   08		   *	    cmp    cellColors + [eax], 008h
 00000536  75 15	   *	    jne    @C0049
 00000538		   *@C004A:
 00000538  FE 05 0000008B R				inc putCell														 ;
 0000053E  8D 35 00000004 R				lea esi,cellColors			; adds tile color to random cell	 ;
 00000544  03 35 00000000 R				add esi,ranCell													 ;
																							 ;
							; move the cell to the random cell the loop found				 ;
 0000054A  C6 06 0B					mov BYTE PTR [esi],11											 ;
						.endif																 ;
																							 ;
					.until putCell == 1														 ;
 0000054D		   *@C0049:
 0000054D  80 3D 0000008B R
	   01		   *	    cmp    putCell, 001h
 00000554  75 BC	   *	    jne    @C0048
 00000556  C3				ret																		 ;
 00000557			RandomCell ENDP																 ;
				;----------------------------------------------------------------------------;

				; custom print line function which prints a single row at a time, as well
				; as sets the color according to the cell's element in our model of the 
				; board.
				;----------------------------------------------------------------------------;
 00000557			PrintLine PROC idx:BYTE														 ;
 00000557  55		   *	    push   ebp
 00000558  8B EC	   *	    mov    ebp, esp
 0000055A  0F B6 5D 08			movzx ebx, idx															 ;
				    INVOKE WriteColorChar, ' ', ' ', cellColors[ebx+0]						 ;
 0000055E  8A 83 00000004 R *	    mov    al, cellColors[ebx]
 00000564  50		   *	    push   eax
 00000565  6A 20	   *	    push   +000000020h
 00000567  6A 20	   *	    push   +000000020h
 00000569  E8 00000074	   *	    call   WriteColorChar
				    INVOKE WriteColorChar, ' ', ' ', cellColors[ebx+0]						 ;
 0000056E  8A 83 00000004 R *	    mov    al, cellColors[ebx]
 00000574  50		   *	    push   eax
 00000575  6A 20	   *	    push   +000000020h
 00000577  6A 20	   *	    push   +000000020h
 00000579  E8 00000064	   *	    call   WriteColorChar
				    INVOKE WriteColorChar, ' ', ' ', cellColors[ebx+1]						 ;
 0000057E  8A 83 00000005 R *	    mov    al, cellColors[ebx]+001h
 00000584  50		   *	    push   eax
 00000585  6A 20	   *	    push   +000000020h
 00000587  6A 20	   *	    push   +000000020h
 00000589  E8 00000054	   *	    call   WriteColorChar
				    INVOKE WriteColorChar, ' ', ' ', cellColors[ebx+1]						 ;
 0000058E  8A 83 00000005 R *	    mov    al, cellColors[ebx]+001h
 00000594  50		   *	    push   eax
 00000595  6A 20	   *	    push   +000000020h
 00000597  6A 20	   *	    push   +000000020h
 00000599  E8 00000044	   *	    call   WriteColorChar
					INVOKE WriteColorChar, ' ', ' ', cellColors[ebx+2]						 ;
 0000059E  8A 83 00000006 R *	    mov    al, cellColors[ebx]+002h
 000005A4  50		   *	    push   eax
 000005A5  6A 20	   *	    push   +000000020h
 000005A7  6A 20	   *	    push   +000000020h
 000005A9  E8 00000034	   *	    call   WriteColorChar
				    INVOKE WriteColorChar, ' ', ' ', cellColors[ebx+2]						 ;
 000005AE  8A 83 00000006 R *	    mov    al, cellColors[ebx]+002h
 000005B4  50		   *	    push   eax
 000005B5  6A 20	   *	    push   +000000020h
 000005B7  6A 20	   *	    push   +000000020h
 000005B9  E8 00000024	   *	    call   WriteColorChar
				    INVOKE WriteColorChar, ' ', ' ', cellColors[ebx+3]						 ;
 000005BE  8A 83 00000007 R *	    mov    al, cellColors[ebx]+003h
 000005C4  50		   *	    push   eax
 000005C5  6A 20	   *	    push   +000000020h
 000005C7  6A 20	   *	    push   +000000020h
 000005C9  E8 00000014	   *	    call   WriteColorChar
				    INVOKE WriteColorChar, ' ', ' ', cellColors[ebx+3]						 ;
 000005CE  8A 83 00000007 R *	    mov    al, cellColors[ebx]+003h
 000005D4  50		   *	    push   eax
 000005D5  6A 20	   *	    push   +000000020h
 000005D7  6A 20	   *	    push   +000000020h
 000005D9  E8 00000004	   *	    call   WriteColorChar
				    ret																		 ;
 000005DE  C9		   *	    leave  
 000005DF  C2 0004	   *	    ret    00004h
 000005E2			PrintLine ENDP																 ;
				;----------------------------------------------------------------------------;

				; this writes out four characters, along with the forecolor and background color,
				; which makes up one square of our board. One swuare from our board is four characters
				; and this proc converts one cell from our board model to our view.
				;----------------------------------------------------------------------------;
 000005E2			WriteColorChar PROC USES eax, char:BYTE, forecolor:BYTE, backcolor:BYTE 	 ;
 000005E2  55		   *	    push   ebp
 000005E3  8B EC	   *	    mov    ebp, esp
 000005E5  50		   *	    push   eax
				    INVOKE SetColor, forecolor, backcolor									 ;
 000005E6  8A 45 10	   *	    mov    al, byte  ptr ss:[ebp]+010h
 000005E9  50		   *	    push   eax
 000005EA  8A 45 0C	   *	    mov    al, byte  ptr ss:[ebp]+00Ch
 000005ED  50		   *	    push   eax
 000005EE  E8 0000004C	   *	    call   SetColor
 000005F3  8A 45 08		    mov al, char															 ;
 000005F6  E8 00000000 E	    call WriteChar															 ;
					INVOKE SetColor, forecolor, backcolor									 ;
 000005FB  8A 45 10	   *	    mov    al, byte  ptr ss:[ebp]+010h
 000005FE  50		   *	    push   eax
 000005FF  8A 45 0C	   *	    mov    al, byte  ptr ss:[ebp]+00Ch
 00000602  50		   *	    push   eax
 00000603  E8 00000037	   *	    call   SetColor
 00000608  8A 45 08		    mov al, char															 ;
 0000060B  E8 00000000 E	    call WriteChar															 ;
					INVOKE SetColor, forecolor, backcolor									 ;
 00000610  8A 45 10	   *	    mov    al, byte  ptr ss:[ebp]+010h
 00000613  50		   *	    push   eax
 00000614  8A 45 0C	   *	    mov    al, byte  ptr ss:[ebp]+00Ch
 00000617  50		   *	    push   eax
 00000618  E8 00000022	   *	    call   SetColor
 0000061D  8A 45 08		    mov al, char															 ;
 00000620  E8 00000000 E	    call WriteChar															 ;
					INVOKE SetColor, forecolor, backcolor									 ;
 00000625  8A 45 10	   *	    mov    al, byte  ptr ss:[ebp]+010h
 00000628  50		   *	    push   eax
 00000629  8A 45 0C	   *	    mov    al, byte  ptr ss:[ebp]+00Ch
 0000062C  50		   *	    push   eax
 0000062D  E8 0000000D	   *	    call   SetColor
 00000632  8A 45 08		    mov al, char															 ;
 00000635  E8 00000000 E	    call WriteChar															 ;
				    ret																		 ;
 0000063A  58		   *	    pop    eax
 0000063B  C9		   *	    leave  
 0000063C  C2 000C	   *	    ret    0000Ch
 0000063F			WriteColorChar ENDP															 ;
				;----------------------------------------------------------------------------;


 0000063F			SetColor PROC, forecolor:BYTE, backcolor:BYTE
 0000063F  55		   *	    push   ebp
 00000640  8B EC	   *	    mov    ebp, esp
 00000642  60				pushad
				    ;movzx eax, backcolor
				    ;shl eax, 4
				    ;or al, forecolor
 00000643  0F B6 45 0C			movzx eax, backcolor
 00000647  BB 00000010			mov ebx, 16
 0000064C  F7 E3			mul ebx
 0000064E  0F B6 5D 08			movzx ebx, forecolor
 00000652  03 C3			add eax, ebx
 00000654  E8 00000000 E		call SetTextColor       ; from Irvine32.lib
 00000659  61				popad
				    ret
 0000065A  C9		   *	    leave  
 0000065B  C2 0008	   *	    ret    00008h
 0000065E			SetColor ENDP


				;----------------------------------------------------------------------------;
 0000065E			transferArray PROC
 0000065E  60				pushad
 0000065F  B9 00000004			mov ecx, 4
 00000664  BE 00000000			mov esi, 0
 00000669				fill:
 00000669  8B 14 B5				mov edx, shiftArray[esi*4]
	   0000005A R
 00000670  8B 1D 00000056 R			mov ebx, rowIdx
 00000676  03 DB				add ebx, ebx
 00000678  03 DB				add ebx, ebx
 0000067A  03 DE				add ebx, esi
 0000067C  88 93 00000004 R			mov cellColors[ebx], dl
 00000682  46					inc esi
 00000683  E2 E4			loop fill
 00000685  61				popad
 00000686  C3				ret
 00000687			transferArray ENDP

 00000687			transferTransposedArray PROC
 00000687  60				pushad
 00000688  B9 00000004			mov ecx, 4
 0000068D  BE 00000000			mov esi, 0
 00000692				fill:
 00000692  8B 14 B5				mov edx, shiftArray[esi*4]
	   0000005A R
 00000699  8B DE				mov ebx, esi
 0000069B  03 DB				add ebx, ebx
 0000069D  03 DB				add ebx, ebx
 0000069F  03 1D 00000056 R			add ebx, rowIdx
 000006A5  88 93 00000004 R			mov cellColors[ebx], dl
 000006AB  46					inc esi
 000006AC  E2 E4			loop fill
 000006AE  61				popad
 000006AF  C3				ret
 000006B0			transferTransposedArray ENDP
				;----------------------------------------------------------------------------;



				;----------------------------------------------------------------------------;
 000006B0			append PROC
 000006B0  60				pushad
 000006B1  B9 00000004			mov ecx, 4
 000006B6  BE 00000000			mov esi, 0
 000006BB				appendValue:
						.if shiftArray[esi*4] == 7
 000006BB  83 3C B5
	   0000005A R 07   *	    cmp    shiftArray + [esi * 004h], 007h
 000006C3  75 10	   *	    jne    @C004D
 000006C5  0F B6 98					movzx ebx, cellColors[eax]
	   00000004 R
 000006CC  89 1C B5					mov shiftArray[esi*4], ebx
	   0000005A R
 000006D3  EB 03					jmp outOfLoop
						.endif
 000006D5		   *@C004D:
 000006D5  46					inc esi
 000006D6  E2 E3			loop appendValue
 000006D8				outOfLoop:
 000006D8  61				popad
 000006D9  C3				ret
 000006DA			append ENDP

 000006DA			appendReversed PROC
 000006DA  60				pushad
 000006DB  BE 00000004			mov esi, 4
 000006E0				appendValue:
 000006E0  83 FE 00				cmp esi, 0
 000006E3  74 1D				je outOfLoop
 000006E5  4E					dec esi
						.if shiftArray[esi*4] == 7
 000006E6  83 3C B5
	   0000005A R 07   *	    cmp    shiftArray + [esi * 004h], 007h
 000006EE  75 10	   *	    jne    @C004F
 000006F0  0F B6 98					movzx ebx, cellColors[eax]
	   00000004 R
 000006F7  89 1C B5					mov shiftArray[esi*4], ebx
	   0000005A R
 000006FE  EB 02					jmp outOfLoop
						.endif
 00000700		   *@C004F:
 00000700  E2 DE			loop appendValue
 00000702				outOfLoop:
 00000702  61				popad
 00000703  C3				ret
 00000704			appendReversed ENDP
				;----------------------------------------------------------------------------;

				END MAIN
Microsoft (R) Macro Assembler Version 14.00.24210.0	    12/12/17 13:24:50
2048			(2048.asm			     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000008C Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000704 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MergeDown  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MergeLeft  . . . . . . . . . . .	P Near	 000000A3 _TEXT	Length= 00000133 Public STDCALL
  rowLoop  . . . . . . . . . . .	L Near	 000000A8 _TEXT	
  colLoop  . . . . . . . . . . .	L Near	 000000BD _TEXT	
  innerDone  . . . . . . . . . .	L Near	 000001CE _TEXT	
  done . . . . . . . . . . . . .	L Near	 000001D5 _TEXT	
MergeRight . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MergeUp  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MergeVertical  . . . . . . . . .	P Near	 000001D6 _TEXT	Length= 00000134 Public STDCALL
  rowLoop  . . . . . . . . . . .	L Near	 000001DB _TEXT	
  colLoop  . . . . . . . . . . .	L Near	 000001F0 _TEXT	
  innerDone  . . . . . . . . . .	L Near	 00000302 _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000309 _TEXT	
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintBoard . . . . . . . . . . .	P Near	 000004B0 _TEXT	Length= 0000005B Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000004B5 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000004C8 _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 000004DB _TEXT	
  L4 . . . . . . . . . . . . . .	L Near	 000004EE _TEXT	
PrintLine  . . . . . . . . . . .	P Near	 00000557 _TEXT	Length= 0000008B Public STDCALL
  idx  . . . . . . . . . . . . .	Byte	 bp + 00000008
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomCell . . . . . . . . . . .	P Near	 0000050B _TEXT	Length= 0000004C Public STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetColor . . . . . . . . . . . .	P Near	 0000063F _TEXT	Length= 0000001F Public STDCALL
  forecolor  . . . . . . . . . .	Byte	 bp + 00000008
  backcolor  . . . . . . . . . .	Byte	 bp + 0000000C
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShiftDown  . . . . . . . . . . .	P Near	 00000373 _TEXT	Length= 0000006A Public STDCALL
  rowLoop  . . . . . . . . . . .	L Near	 00000378 _TEXT	
  colLoop  . . . . . . . . . . .	L Near	 000003B1 _TEXT	
  innerDone  . . . . . . . . . .	L Near	 000003D3 _TEXT	
  done . . . . . . . . . . . . .	L Near	 000003DC _TEXT	
ShiftLeft  . . . . . . . . . . .	P Near	 0000030A _TEXT	Length= 00000069 Public STDCALL
  rowLoop  . . . . . . . . . . .	L Near	 0000030F _TEXT	
  colLoop  . . . . . . . . . . .	L Near	 00000348 _TEXT	
  innerDone  . . . . . . . . . .	L Near	 00000369 _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000372 _TEXT	
ShiftRight . . . . . . . . . . .	P Near	 000003DD _TEXT	Length= 00000069 Public STDCALL
  rowLoop  . . . . . . . . . . .	L Near	 000003E2 _TEXT	
  colLoop  . . . . . . . . . . .	L Near	 0000041B _TEXT	
  innerDone  . . . . . . . . . .	L Near	 0000043C _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000445 _TEXT	
ShiftUp  . . . . . . . . . . . .	P Near	 00000446 _TEXT	Length= 0000006A Public STDCALL
  rowLoop  . . . . . . . . . . .	L Near	 0000044B _TEXT	
  colLoop  . . . . . . . . . . .	L Near	 00000484 _TEXT	
  innerDone  . . . . . . . . . .	L Near	 000004A6 _TEXT	
  done . . . . . . . . . . . . .	L Near	 000004AF _TEXT	
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
TakeInput  . . . . . . . . . . .	P Near	 00000032 _TEXT	Length= 00000071 Public STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteColorChar . . . . . . . . .	P Near	 000005E2 _TEXT	Length= 0000005D Public STDCALL
  char . . . . . . . . . . . . .	Byte	 bp + 00000008
  forecolor  . . . . . . . . . .	Byte	 bp + 0000000C
  backcolor  . . . . . . . . . .	Byte	 bp + 00000010
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
appendReversed . . . . . . . . .	P Near	 000006DA _TEXT	Length= 0000002A Public STDCALL
  appendValue  . . . . . . . . .	L Near	 000006E0 _TEXT	
  outOfLoop  . . . . . . . . . .	L Near	 00000702 _TEXT	
append . . . . . . . . . . . . .	P Near	 000006B0 _TEXT	Length= 0000002A Public STDCALL
  appendValue  . . . . . . . . .	L Near	 000006BB _TEXT	
  outOfLoop  . . . . . . . . . .	L Near	 000006D8 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000032 Public STDCALL
  mainLoop . . . . . . . . . . .	L Near	 0000000A _TEXT	
  done . . . . . . . . . . . . .	L Near	 0000002B _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
transferArray  . . . . . . . . .	P Near	 0000065E _TEXT	Length= 00000029 Public STDCALL
  fill . . . . . . . . . . . . .	L Near	 00000669 _TEXT	
transferTransposedArray  . . . .	P Near	 00000687 _TEXT	Length= 00000029 Public STDCALL
  fill . . . . . . . . . . . . .	L Near	 00000692 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cellColors . . . . . . . . . . .	Byte	 00000004 _DATA	
cellVals . . . . . . . . . . . .	DWord	 00000014 _DATA	
colIndex . . . . . . . . . . . .	DWord	 0000006A _DATA	
color1 . . . . . . . . . . . . .	Number	 0000000Bh   
color2 . . . . . . . . . . . . .	Number	 00000009h   
color3 . . . . . . . . . . . . .	Number	 00000005h   
color4 . . . . . . . . . . . . .	Number	 00000001h   
color5 . . . . . . . . . . . . .	Number	 0000000Ch   
color6 . . . . . . . . . . . . .	Number	 00000002h   
color7 . . . . . . . . . . . . .	Number	 00000004h   
color8 . . . . . . . . . . . . .	Number	 00000008h   
columns  . . . . . . . . . . . .	Number	 00000004h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
empty2 . . . . . . . . . . . . .	Number	 00000008h   
empty  . . . . . . . . . . . . .	Number	 00000007h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gameOver . . . . . . . . . . . .	Byte	 0000008A _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
key  . . . . . . . . . . . . . .	Byte	 00000055 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
loops  . . . . . . . . . . . . .	Number	 00000002h   
magenta  . . . . . . . . . . . .	Number	 00000005h   
putCell  . . . . . . . . . . . .	Byte	 0000008B _DATA	
ranCell  . . . . . . . . . . . .	DWord	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rowH . . . . . . . . . . . . . .	Number	 00000004h   
rowIdx . . . . . . . . . . . . .	DWord	 00000056 _DATA	
rows . . . . . . . . . . . . . .	Number	 00000004h   
shiftArray . . . . . . . . . . .	DWord	 0000005A _DATA	
shiftDirection . . . . . . . . .	Byte	 00000054 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
winString  . . . . . . . . . . .	Byte	 0000006E _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
