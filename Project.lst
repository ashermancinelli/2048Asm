Microsoft (R) Macro Assembler Version 14.00.23026.0	    12/08/17 18:40:21
2048			(2048.asm			     Page 1 - 1


				   TITLE 2048			(2048.asm)

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				; procedure prototypes:
				SetColor PROTO forecolor:BYTE, backcolor: BYTE
				WriteColorChar PROTO char:BYTE, forecolor:BYTE, backcolor:BYTE
				PrintLine PROTO idx:BYTE
				PrintBoard PROTO
				RandomCell PROTO
				TakeInput PROTO
				ShiftLeft PROTO
				ShiftRight PROTO
				ShiftDown PROTO
				ShiftUp PROTO

 00000000			.data
 = 00000004			rows = 4
 = 00000004			columns = 4
 = 00000004			rowH = 4
 00000000 00000000		ranCell DWORD ?
 = 00000002			loops = 2
 = 0000000B			color1 = 11		; light blue = 2
 = 00000009			color2 = 9		; dark blue = 4
 = 00000005			color3 = 5		; purple = 8
 = 00000001			color4 = 1		; dark purple = 16
 = 0000000C			color5 = 12		; red = 32
 = 00000007			empty = 7		; gray
 = 00000008			empty2 = 8		; dark gray
 00000004 07 0B 07 07 07	cellColors BYTE	7,11,7,7,
	   07 07 07 07 07
	   0B 07 07 07 07
	   07
								7,7,7,7,
								7,7,11,7,
								7,7,7,7		; initializes cell colors to default
 00000014 00000000		cellVals DWORD	0,2,0,0,
	   00000002
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000002
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
								0,0,0,0,
								0,0,2,0,
								0,0,0,0		; initializes cell values to default
 00000054 00			shiftDirection BYTE ?
 00000055 00			key BYTE ?
 00000056 00000000		rowIdx DWORD ?
 0000005A 00000007		shiftArray DWORD 7,7,7,7
	   00000007
	   00000007
	   00000007


 0000006A 00			putCell BYTE 0

 00000000			.code
 00000000			main PROC
 00000000  E8 00000000 E		call Randomize
 00000005  E8 00000202			call PrintBoard

 0000000A			mainLoop:

 0000000A  E8 0000000E			call TakeInput
					;call RandomCell
 0000000F  E8 000001F8			call PrintBoard
 00000014  E2 F4			loop mainLoop


				    exit
 00000016  6A 00	   *	    push   +000000000h
 00000018  E8 00000000 E   *	    call   ExitProcess
 0000001D			main ENDP

 0000001D			TakeInput PROC
 0000001D  E8 00000000 E		call ReadChar
 00000022  A2 00000055 R		mov key,al
					.if key == 97				
 00000027  80 3D 00000055 R
	   61		   *	    cmp    key, 061h
 0000002E  75 07	   *	    jne    @C0001
 00000030  E8 00000031				call ShiftLeft
					.elseif key == 115			
 00000035  EB 2E	   *	    jmp    @C0003
 00000037		   *@C0001:
 00000037  80 3D 00000055 R
	   73		   *	    cmp    key, 073h
 0000003E  75 07	   *	    jne    @C0004
 00000040  E8 0000008A				call ShiftDown
					.elseif key == 100			
 00000045  EB 1E	   *	    jmp    @C0006
 00000047		   *@C0004:
 00000047  80 3D 00000055 R
	   64		   *	    cmp    key, 064h
 0000004E  75 07	   *	    jne    @C0007
 00000050  E8 000000E4				call ShiftRight
					.elseif key == 119			
 00000055  EB 0E	   *	    jmp    @C0009
 00000057		   *@C0007:
 00000057  80 3D 00000055 R
	   77		   *	    cmp    key, 077h
 0000005E  75 05	   *	    jne    @C000A
 00000060  E8 0000013D				call ShiftUp
					.endif
 00000065		   *@C000A:
 00000065		   *@C0009:
 00000065		   *@C0006:
 00000065		   *@C0003:
 00000065  C3				ret
 00000066			TakeInput ENDP

 00000066			ShiftLeft PROC
 00000066  BE 00000000			mov esi, 0
 0000006B			rowLoop:
 0000006B  83 FE 04			cmp esi, 4
 0000006E  74 5E			je done
 00000070  60				pushad
 00000071  C7 05 0000005A R		mov shiftArray[0], 7
	   00000007
 0000007B  C7 05 0000005E R		mov shiftArray[4], 7
	   00000007
 00000085  C7 05 00000062 R		mov shiftArray[8], 7
	   00000007
 0000008F  C7 05 00000066 R		mov shiftArray[12], 7
	   00000007
 00000099  89 35 00000056 R		mov rowIdx, esi
 0000009F  BE 00000000			mov esi, 0
 000000A4				colLoop:
 000000A4  83 FE 04				cmp esi, 4
 000000A7  74 1C				je innerDone
 000000A9  A1 00000056 R			mov eax, rowIdx
 000000AE  03 C0				add eax, eax
 000000B0  03 C0				add eax, eax
 000000B2  03 C6				add eax, esi
						.if cellColors[eax] != 7
 000000B4  80 B8 00000004 R
	   07		   *	    cmp    cellColors + [eax], 007h
 000000BB  74 05	   *	    je	@C000C
 000000BD  E8 00000341					call append
						.endif
 000000C2		   *@C000C:
 000000C2  46					inc esi
 000000C3  EB DF				jmp colLoop
 000000C5			innerDone:
 000000C5  E8 000002E7			call transferArray
 000000CA  61				popad
 000000CB  46				inc esi
 000000CC  EB 9D			jmp rowLoop
 000000CE			done:
 000000CE  C3				ret
 000000CF			ShiftLeft ENDP

 000000CF			ShiftDown PROC
 000000CF  BE 00000000			mov esi, 0
 000000D4			rowLoop:
 000000D4  83 FE 04			cmp esi, 4
 000000D7  74 5F			je done
 000000D9  60				pushad
 000000DA  C7 05 0000005A R		mov shiftArray[0], 7
	   00000007
 000000E4  C7 05 0000005E R		mov shiftArray[4], 7
	   00000007
 000000EE  C7 05 00000062 R		mov shiftArray[8], 7
	   00000007
 000000F8  C7 05 00000066 R		mov shiftArray[12], 7
	   00000007
 00000102  89 35 00000056 R		mov rowIdx, esi
 00000108  BE 00000004			mov esi, 4
 0000010D				colLoop:
 0000010D  83 FE 00				cmp esi, 0
 00000110  74 1D				je innerDone
 00000112  4E					dec esi
						; eax = (4 * rowIdx) + esi
 00000113  8B C6				mov eax, esi
 00000115  03 C0				add eax, eax
 00000117  03 C0				add eax, eax
 00000119  03 05 00000056 R			add eax, rowIdx
						.if cellColors[eax] != 7
 0000011F  80 B8 00000004 R
	   07		   *	    cmp    cellColors + [eax], 007h
 00000126  74 05	   *	    je	@C000E
 00000128  E8 00000300					call appendReversed
						.endif
 0000012D		   *@C000E:
 0000012D  EB DE				jmp colLoop
 0000012F			innerDone:
 0000012F  E8 000002A6			call transferTransposedArray
 00000134  61				popad
 00000135  46				inc esi
 00000136  EB 9C			jmp rowLoop
 00000138			done:
 00000138  C3				ret
 00000139			ShiftDown ENDP

 00000139			ShiftRight PROC
 00000139  BE 00000000			mov esi, 0
 0000013E			rowLoop:
 0000013E  83 FE 04			cmp esi, 4
 00000141  74 5E			je done
 00000143  60				pushad
 00000144  C7 05 0000005A R		mov shiftArray[0], 7
	   00000007
 0000014E  C7 05 0000005E R		mov shiftArray[4], 7
	   00000007
 00000158  C7 05 00000062 R		mov shiftArray[8], 7
	   00000007
 00000162  C7 05 00000066 R		mov shiftArray[12], 7
	   00000007
 0000016C  89 35 00000056 R		mov rowIdx, esi
 00000172  BE 00000004			mov esi, 4
 00000177				colLoop:
 00000177  83 FE 00				cmp esi, 0
 0000017A  74 1C				je innerDone
 0000017C  4E					dec esi
						; eax = (4 * rowIdx) + esi
 0000017D  A1 00000056 R			mov eax, rowIdx
 00000182  03 C0				add eax, eax
 00000184  03 C0				add eax, eax
 00000186  03 C6				add eax, esi
						.if cellColors[eax] != 7
 00000188  80 B8 00000004 R
	   07		   *	    cmp    cellColors + [eax], 007h
 0000018F  74 05	   *	    je	@C0010
 00000191  E8 00000297					call appendReversed
						.endif
 00000196		   *@C0010:
 00000196  EB DF				jmp colLoop
 00000198			innerDone:
 00000198  E8 00000214			call transferArray
 0000019D  61				popad
 0000019E  46				inc esi
 0000019F  EB 9D			jmp rowLoop
 000001A1			done:
 000001A1  C3				ret
 000001A2			ShiftRight ENDP

 000001A2			ShiftUp PROC
 000001A2  BE 00000000			mov esi, 0
 000001A7			rowLoop:
 000001A7  83 FE 04			cmp esi, 4
 000001AA  74 5F			je done
 000001AC  60				pushad
 000001AD  C7 05 0000005A R		mov shiftArray[0], 7
	   00000007
 000001B7  C7 05 0000005E R		mov shiftArray[4], 7
	   00000007
 000001C1  C7 05 00000062 R		mov shiftArray[8], 7
	   00000007
 000001CB  C7 05 00000066 R		mov shiftArray[12], 7
	   00000007
 000001D5  89 35 00000056 R		mov rowIdx, esi
 000001DB  BE 00000000			mov esi, 0
 000001E0				colLoop:
 000001E0  83 FE 04				cmp esi, 4
 000001E3  74 1D				je innerDone
 000001E5  8B C6				mov eax, esi
 000001E7  03 C0				add eax, eax
 000001E9  03 C0				add eax, eax
 000001EB  03 05 00000056 R			add eax, rowIdx
						.if cellColors[eax] != 7
 000001F1  80 B8 00000004 R
	   07		   *	    cmp    cellColors + [eax], 007h
 000001F8  74 05	   *	    je	@C0012
 000001FA  E8 00000204					call append
						.endif
 000001FF		   *@C0012:
 000001FF  46					inc esi
 00000200  EB DE				jmp colLoop
 00000202			innerDone:
 00000202  E8 000001D3			call transferTransposedArray
 00000207  61				popad
 00000208  46				inc esi
 00000209  EB 9C			jmp rowLoop
 0000020B			done:
 0000020B  C3				ret
 0000020C			ShiftUp ENDP

 0000020C			PrintBoard PROC
 0000020C  B9 00000004			mov ecx,rowH
 00000211				L1:		; loop for printing row 1
					INVOKE PrintLine, 0
 00000211  6A 00	   *	    push   +000000000h
 00000213  E8 0000009B	   *	    call   PrintLine
 00000218  E8 00000000 E	    call Crlf
 0000021D  E2 F2			loop L1

 0000021F  B9 00000004			mov ecx,rowH
 00000224				L2:		; loop for printing row 2
				    INVOKE PrintLine, 4
 00000224  6A 04	   *	    push   +000000004h
 00000226  E8 00000088	   *	    call   PrintLine
 0000022B  E8 00000000 E	    call Crlf
 00000230  E2 F2			loop L2
					
 00000232  B9 00000004			mov ecx,rowH
 00000237				L3:		; loop for printing row 3
					INVOKE PrintLine, 8
 00000237  6A 08	   *	    push   +000000008h
 00000239  E8 00000075	   *	    call   PrintLine
 0000023E  E8 00000000 E	    call Crlf
 00000243  E2 F2			loop L3

 00000245  B9 00000004			mov ecx,rowH
 0000024A				L4:		; loop for printing row 4
				    INVOKE PrintLine, 12
 0000024A  6A 0C	   *	    push   +00000000Ch
 0000024C  E8 00000062	   *	    call   PrintLine
 00000251  E8 00000000 E	    call Crlf
 00000256  E2 F2			loop L4

				    INVOKE SetColor, black, black ; return to normal color
 00000258  6A 00	   *	    push   +000000000h
 0000025A  6A 00	   *	    push   +000000000h
 0000025C  E8 0000013A	   *	    call   SetColor
 00000261  E8 00000000 E	    call Crlf
 00000266  C3				ret
 00000267			PrintBoard ENDP

 00000267			RandomCell PROC
 00000267  C6 05 0000006A R		mov putCell, 0
	   00
					.repeat
 0000026E		   *@C0014:
 0000026E  B8 00000010				mov eax,16
 00000273  E8 00000000 E			call RandomRange
 00000278  A3 00000000 R			mov ranCell,eax

 0000027D  A1 00000000 R			mov eax, ranCell

						.if cellColors[eax] == 7 || cellColors[eax] == 8 
 00000282  80 B8 00000004 R
	   07		   *	    cmp    cellColors + [eax], 007h
 00000289  74 09	   *	    je	@C0016
 0000028B  80 B8 00000004 R
	   08		   *	    cmp    cellColors + [eax], 008h
 00000292  75 15	   *	    jne    @C0015
 00000294		   *@C0016:
 00000294  FE 05 0000006A R				inc putCell
 0000029A  8D 35 00000004 R				lea esi,cellColors			; adds tile color to random cell
 000002A0  03 35 00000000 R				add esi,ranCell
 000002A6  C6 06 0B					mov BYTE PTR [esi],11	
						.endif
						
					.until putCell == 1
 000002A9		   *@C0015:
 000002A9  80 3D 0000006A R
	   01		   *	    cmp    putCell, 001h
 000002B0  75 BC	   *	    jne    @C0014
 000002B2  C3				ret
 000002B3			RandomCell ENDP

 000002B3			PrintLine PROC idx:BYTE
 000002B3  55		   *	    push   ebp
 000002B4  8B EC	   *	    mov    ebp, esp
 000002B6  0F B6 5D 08			movzx ebx, idx
				    INVOKE WriteColorChar, ' ', '0', cellColors[ebx+0]
 000002BA  8A 83 00000004 R *	    mov    al, cellColors[ebx]
 000002C0  50		   *	    push   eax
 000002C1  6A 30	   *	    push   +000000030h
 000002C3  6A 20	   *	    push   +000000020h
 000002C5  E8 00000074	   *	    call   WriteColorChar
				    INVOKE WriteColorChar, ' ', '0', cellColors[ebx+0]
 000002CA  8A 83 00000004 R *	    mov    al, cellColors[ebx]
 000002D0  50		   *	    push   eax
 000002D1  6A 30	   *	    push   +000000030h
 000002D3  6A 20	   *	    push   +000000020h
 000002D5  E8 00000064	   *	    call   WriteColorChar
				    INVOKE WriteColorChar, ' ', '0', cellColors[ebx+1]
 000002DA  8A 83 00000005 R *	    mov    al, cellColors[ebx]+001h
 000002E0  50		   *	    push   eax
 000002E1  6A 30	   *	    push   +000000030h
 000002E3  6A 20	   *	    push   +000000020h
 000002E5  E8 00000054	   *	    call   WriteColorChar
				    INVOKE WriteColorChar, ' ', '0', cellColors[ebx+1]
 000002EA  8A 83 00000005 R *	    mov    al, cellColors[ebx]+001h
 000002F0  50		   *	    push   eax
 000002F1  6A 30	   *	    push   +000000030h
 000002F3  6A 20	   *	    push   +000000020h
 000002F5  E8 00000044	   *	    call   WriteColorChar
					INVOKE WriteColorChar, ' ', '0', cellColors[ebx+2]
 000002FA  8A 83 00000006 R *	    mov    al, cellColors[ebx]+002h
 00000300  50		   *	    push   eax
 00000301  6A 30	   *	    push   +000000030h
 00000303  6A 20	   *	    push   +000000020h
 00000305  E8 00000034	   *	    call   WriteColorChar
				    INVOKE WriteColorChar, ' ', '0', cellColors[ebx+2]
 0000030A  8A 83 00000006 R *	    mov    al, cellColors[ebx]+002h
 00000310  50		   *	    push   eax
 00000311  6A 30	   *	    push   +000000030h
 00000313  6A 20	   *	    push   +000000020h
 00000315  E8 00000024	   *	    call   WriteColorChar
				    INVOKE WriteColorChar, ' ', '0', cellColors[ebx+3]
 0000031A  8A 83 00000007 R *	    mov    al, cellColors[ebx]+003h
 00000320  50		   *	    push   eax
 00000321  6A 30	   *	    push   +000000030h
 00000323  6A 20	   *	    push   +000000020h
 00000325  E8 00000014	   *	    call   WriteColorChar
				    INVOKE WriteColorChar, ' ', '0', cellColors[ebx+3]
 0000032A  8A 83 00000007 R *	    mov    al, cellColors[ebx]+003h
 00000330  50		   *	    push   eax
 00000331  6A 30	   *	    push   +000000030h
 00000333  6A 20	   *	    push   +000000020h
 00000335  E8 00000004	   *	    call   WriteColorChar
				    ret
 0000033A  C9		   *	    leave  
 0000033B  C2 0004	   *	    ret    00004h
 0000033E			PrintLine ENDP

 0000033E			WriteColorChar PROC USES eax, char:BYTE, forecolor:BYTE, backcolor:BYTE 
 0000033E  55		   *	    push   ebp
 0000033F  8B EC	   *	    mov    ebp, esp
 00000341  50		   *	    push   eax
				    INVOKE SetColor, forecolor, backcolor
 00000342  8A 45 10	   *	    mov    al, byte  ptr ss:[ebp]+010h
 00000345  50		   *	    push   eax
 00000346  8A 45 0C	   *	    mov    al, byte  ptr ss:[ebp]+00Ch
 00000349  50		   *	    push   eax
 0000034A  E8 0000004C	   *	    call   SetColor
 0000034F  8A 45 08		    mov al, char
 00000352  E8 00000000 E	    call WriteChar
					INVOKE SetColor, forecolor, backcolor
 00000357  8A 45 10	   *	    mov    al, byte  ptr ss:[ebp]+010h
 0000035A  50		   *	    push   eax
 0000035B  8A 45 0C	   *	    mov    al, byte  ptr ss:[ebp]+00Ch
 0000035E  50		   *	    push   eax
 0000035F  E8 00000037	   *	    call   SetColor
 00000364  8A 45 08		    mov al, char
 00000367  E8 00000000 E	    call WriteChar
					INVOKE SetColor, forecolor, backcolor
 0000036C  8A 45 10	   *	    mov    al, byte  ptr ss:[ebp]+010h
 0000036F  50		   *	    push   eax
 00000370  8A 45 0C	   *	    mov    al, byte  ptr ss:[ebp]+00Ch
 00000373  50		   *	    push   eax
 00000374  E8 00000022	   *	    call   SetColor
 00000379  8A 45 08		    mov al, char
 0000037C  E8 00000000 E	    call WriteChar
					INVOKE SetColor, forecolor, backcolor
 00000381  8A 45 10	   *	    mov    al, byte  ptr ss:[ebp]+010h
 00000384  50		   *	    push   eax
 00000385  8A 45 0C	   *	    mov    al, byte  ptr ss:[ebp]+00Ch
 00000388  50		   *	    push   eax
 00000389  E8 0000000D	   *	    call   SetColor
 0000038E  8A 45 08		    mov al, char
 00000391  E8 00000000 E	    call WriteChar
				    ret
 00000396  58		   *	    pop    eax
 00000397  C9		   *	    leave  
 00000398  C2 000C	   *	    ret    0000Ch
 0000039B			WriteColorChar ENDP

 0000039B			SetColor PROC, forecolor:BYTE, backcolor:BYTE
 0000039B  55		   *	    push   ebp
 0000039C  8B EC	   *	    mov    ebp, esp
 0000039E  0F B6 45 0C		    movzx eax, backcolor
 000003A2  C1 E0 04		    shl eax, 4
 000003A5  0A 45 08		    or al, forecolor
 000003A8  E8 00000000 E	    call SetTextColor       ; from Irvine32.lib
				    ret
 000003AD  C9		   *	    leave  
 000003AE  C2 0008	   *	    ret    00008h
 000003B1			SetColor ENDP

 000003B1			transferArray PROC
 000003B1  60				pushad
 000003B2  B9 00000004			mov ecx, 4
 000003B7  BE 00000000			mov esi, 0
 000003BC				fill:
 000003BC  8B 14 B5				mov edx, shiftArray[esi*4]
	   0000005A R
 000003C3  8B 1D 00000056 R			mov ebx, rowIdx
 000003C9  03 DB				add ebx, ebx
 000003CB  03 DB				add ebx, ebx
 000003CD  03 DE				add ebx, esi
 000003CF  88 93 00000004 R			mov cellColors[ebx], dl
 000003D5  46					inc esi
 000003D6  E2 E4			loop fill
 000003D8  61				popad
 000003D9  C3				ret
 000003DA			transferArray ENDP

 000003DA			transferTransposedArray PROC
 000003DA  60				pushad
 000003DB  B9 00000004			mov ecx, 4
 000003E0  BE 00000000			mov esi, 0
 000003E5				fill:
 000003E5  8B 14 B5				mov edx, shiftArray[esi*4]
	   0000005A R
 000003EC  8B DE				mov ebx, esi
 000003EE  03 DB				add ebx, ebx
 000003F0  03 DB				add ebx, ebx
 000003F2  03 1D 00000056 R			add ebx, rowIdx
 000003F8  88 93 00000004 R			mov cellColors[ebx], dl
 000003FE  46					inc esi
 000003FF  E2 E4			loop fill
 00000401  61				popad
 00000402  C3				ret
 00000403			transferTransposedArray ENDP

 00000403			append PROC
 00000403  60				pushad
 00000404  B9 00000004			mov ecx, 4
 00000409  BE 00000000			mov esi, 0
 0000040E				appendValue:
						.if shiftArray[esi*4] == 7
 0000040E  83 3C B5
	   0000005A R 07   *	    cmp    shiftArray + [esi * 004h], 007h
 00000416  75 10	   *	    jne    @C0019
 00000418  0F B6 98					movzx ebx, cellColors[eax]
	   00000004 R
 0000041F  89 1C B5					mov shiftArray[esi*4], ebx
	   0000005A R
 00000426  EB 03					jmp outOfLoop
						.endif
 00000428		   *@C0019:
 00000428  46					inc esi
 00000429  E2 E3			loop appendValue
 0000042B				outOfLoop:
 0000042B  61				popad
 0000042C  C3				ret
 0000042D			append ENDP

 0000042D			appendReversed PROC
 0000042D  60				pushad
 0000042E  BE 00000004			mov esi, 4
 00000433				appendValue:
 00000433  83 FE 00				cmp esi, 0
 00000436  74 1D				je outOfLoop
 00000438  4E					dec esi
						.if shiftArray[esi*4] == 7
 00000439  83 3C B5
	   0000005A R 07   *	    cmp    shiftArray + [esi * 004h], 007h
 00000441  75 10	   *	    jne    @C001B
 00000443  0F B6 98					movzx ebx, cellColors[eax]
	   00000004 R
 0000044A  89 1C B5					mov shiftArray[esi*4], ebx
	   0000005A R
 00000451  EB 02					jmp outOfLoop
						.endif
 00000453		   *@C001B:
 00000453  E2 DE			loop appendValue
 00000455				outOfLoop:
 00000455  61				popad
 00000456  C3				ret
 00000457			appendReversed ENDP

				END MAIN
Microsoft (R) Macro Assembler Version 14.00.23026.0	    12/08/17 18:40:21
2048			(2048.asm			     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000006B Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000457 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintBoard . . . . . . . . . . .	P Near	 0000020C _TEXT	Length= 0000005B Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000211 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000224 _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 00000237 _TEXT	
  L4 . . . . . . . . . . . . . .	L Near	 0000024A _TEXT	
PrintLine  . . . . . . . . . . .	P Near	 000002B3 _TEXT	Length= 0000008B Public STDCALL
  idx  . . . . . . . . . . . . .	Byte	 bp + 00000008
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomCell . . . . . . . . . . .	P Near	 00000267 _TEXT	Length= 0000004C Public STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetColor . . . . . . . . . . . .	P Near	 0000039B _TEXT	Length= 00000016 Public STDCALL
  forecolor  . . . . . . . . . .	Byte	 bp + 00000008
  backcolor  . . . . . . . . . .	Byte	 bp + 0000000C
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShiftDown  . . . . . . . . . . .	P Near	 000000CF _TEXT	Length= 0000006A Public STDCALL
  rowLoop  . . . . . . . . . . .	L Near	 000000D4 _TEXT	
  colLoop  . . . . . . . . . . .	L Near	 0000010D _TEXT	
  innerDone  . . . . . . . . . .	L Near	 0000012F _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000138 _TEXT	
ShiftLeft  . . . . . . . . . . .	P Near	 00000066 _TEXT	Length= 00000069 Public STDCALL
  rowLoop  . . . . . . . . . . .	L Near	 0000006B _TEXT	
  colLoop  . . . . . . . . . . .	L Near	 000000A4 _TEXT	
  innerDone  . . . . . . . . . .	L Near	 000000C5 _TEXT	
  done . . . . . . . . . . . . .	L Near	 000000CE _TEXT	
ShiftRight . . . . . . . . . . .	P Near	 00000139 _TEXT	Length= 00000069 Public STDCALL
  rowLoop  . . . . . . . . . . .	L Near	 0000013E _TEXT	
  colLoop  . . . . . . . . . . .	L Near	 00000177 _TEXT	
  innerDone  . . . . . . . . . .	L Near	 00000198 _TEXT	
  done . . . . . . . . . . . . .	L Near	 000001A1 _TEXT	
ShiftUp  . . . . . . . . . . . .	P Near	 000001A2 _TEXT	Length= 0000006A Public STDCALL
  rowLoop  . . . . . . . . . . .	L Near	 000001A7 _TEXT	
  colLoop  . . . . . . . . . . .	L Near	 000001E0 _TEXT	
  innerDone  . . . . . . . . . .	L Near	 00000202 _TEXT	
  done . . . . . . . . . . . . .	L Near	 0000020B _TEXT	
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
TakeInput  . . . . . . . . . . .	P Near	 0000001D _TEXT	Length= 00000049 Public STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteColorChar . . . . . . . . .	P Near	 0000033E _TEXT	Length= 0000005D Public STDCALL
  char . . . . . . . . . . . . .	Byte	 bp + 00000008
  forecolor  . . . . . . . . . .	Byte	 bp + 0000000C
  backcolor  . . . . . . . . . .	Byte	 bp + 00000010
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
appendReversed . . . . . . . . .	P Near	 0000042D _TEXT	Length= 0000002A Public STDCALL
  appendValue  . . . . . . . . .	L Near	 00000433 _TEXT	
  outOfLoop  . . . . . . . . . .	L Near	 00000455 _TEXT	
append . . . . . . . . . . . . .	P Near	 00000403 _TEXT	Length= 0000002A Public STDCALL
  appendValue  . . . . . . . . .	L Near	 0000040E _TEXT	
  outOfLoop  . . . . . . . . . .	L Near	 0000042B _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000001D Public STDCALL
  mainLoop . . . . . . . . . . .	L Near	 0000000A _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
transferArray  . . . . . . . . .	P Near	 000003B1 _TEXT	Length= 00000029 Public STDCALL
  fill . . . . . . . . . . . . .	L Near	 000003BC _TEXT	
transferTransposedArray  . . . .	P Near	 000003DA _TEXT	Length= 00000029 Public STDCALL
  fill . . . . . . . . . . . . .	L Near	 000003E5 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cellColors . . . . . . . . . . .	Byte	 00000004 _DATA	
cellVals . . . . . . . . . . . .	DWord	 00000014 _DATA	
color1 . . . . . . . . . . . . .	Number	 0000000Bh   
color2 . . . . . . . . . . . . .	Number	 00000009h   
color3 . . . . . . . . . . . . .	Number	 00000005h   
color4 . . . . . . . . . . . . .	Number	 00000001h   
color5 . . . . . . . . . . . . .	Number	 0000000Ch   
columns  . . . . . . . . . . . .	Number	 00000004h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
empty2 . . . . . . . . . . . . .	Number	 00000008h   
empty  . . . . . . . . . . . . .	Number	 00000007h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
key  . . . . . . . . . . . . . .	Byte	 00000055 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
loops  . . . . . . . . . . . . .	Number	 00000002h   
magenta  . . . . . . . . . . . .	Number	 00000005h   
putCell  . . . . . . . . . . . .	Byte	 0000006A _DATA	
ranCell  . . . . . . . . . . . .	DWord	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rowH . . . . . . . . . . . . . .	Number	 00000004h   
rowIdx . . . . . . . . . . . . .	DWord	 00000056 _DATA	
rows . . . . . . . . . . . . . .	Number	 00000004h   
shiftArray . . . . . . . . . . .	DWord	 0000005A _DATA	
shiftDirection . . . . . . . . .	Byte	 00000054 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
