Microsoft (R) Macro Assembler Version 14.10.25019.0	    12/07/17 15:12:14
2048			(2048.asm			     Page 1 - 1


				   TITLE 2048			(2048.asm)

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				; procedure prototypes:
				SetColor PROTO forecolor:BYTE, backcolor: BYTE
				WriteColorChar PROTO char:BYTE, forecolor:BYTE, backcolor:BYTE
				PrintRowOdd PROTO c1:BYTE, c2:BYTE, c3:BYTE, c4:BYTE
				PrintRowEven PROTO c1:BYTE, c2:BYTE, c3:BYTE, c4:BYTE
				PrintBoard PROTO
				RandomCell PROTO
				TakeInput PROTO
				ShiftLeft PROTO
				ShiftRight PROTO
				ShiftDown PROTO
				ShiftUp PROTO

 00000000			.data
 = 00000004			rows = 4
 = 00000004			columns = 4
 = 00000004			rowH = 4
 00000000 00000000		ranCell DWORD ?
 = 00000002			loops = 2
 = 0000000B			color1 = 11		; light blue = 2
 = 00000009			color2 = 9		; dark blue = 4
 = 00000005			color3 = 5		; purple = 8
 = 00000001			color4 = 1		; dark purple = 16
 = 0000000C			color5 = 12		; red = 32
 = 00000007			empty = 7		; gray
 = 00000008			empty2 = 8		; dark gray
 00000004 07 07 07 07 07	cells BYTE	7,7,7,7,
	   07 07 07 07 07
	   07 07 07 07 07
	   07
							7,7,7,7,
							7,7,7,7,
							7,7,7,7		; initializes cell colors to an empty board
 00000014 00			shiftDirection BYTE ?
 00000015 00			key BYTE ?
 00000016 00000000		CurrentRow DWORD ?
 0000001A 00000007		shiftArray DWORD 7,7,7,7
	   00000007
	   00000007
	   00000007


 0000002A 00			putCell BYTE 0

 00000000			.code
 00000000			main PROC
 00000000  E8 00000000 E		call Randomize

 00000005  E8 000001EA			call RandomCell
 0000000A  E8 000001E5			call RandomCell
 0000000F  E8 0000012D			call PrintBoard

 00000014			mainLoop:

 00000014  E8 0000000E			call TakeInput
					;call RandomCell
 00000019  E8 00000123			call PrintBoard

 0000001E  E2 F4			loop mainLoop


				    exit
 00000020  6A 00	   *	    push   +000000000h
 00000022  E8 00000000 E   *	    call   ExitProcess
 00000027			main ENDP

 00000027			TakeInput PROC
 00000027  E8 00000000 E		call ReadChar
 0000002C  A2 00000015 R		mov key,al
					.if key == 97				
 00000031  80 3D 00000015 R
	   61		   *	    cmp    key, 061h
 00000038  75 07	   *	    jne    @C0001
 0000003A  E8 00000030				call ShiftLeft
					.elseif key == 115			
 0000003F  EB 2E	   *	    jmp    @C0003
 00000041		   *@C0001:
 00000041  80 3D 00000015 R
	   73		   *	    cmp    key, 073h
 00000048  75 07	   *	    jne    @C0004
 0000004A  E8 00000089				call ShiftDown
					.elseif key == 100			
 0000004F  EB 1E	   *	    jmp    @C0006
 00000051		   *@C0004:
 00000051  80 3D 00000015 R
	   64		   *	    cmp    key, 064h
 00000058  75 07	   *	    jne    @C0007
 0000005A  E8 00000079				call ShiftRight
					.elseif key == 119			
 0000005F  EB 0E	   *	    jmp    @C0009
 00000061		   *@C0007:
 00000061  80 3D 00000015 R
	   77		   *	    cmp    key, 077h
 00000068  75 05	   *	    jne    @C000A
 0000006A  E8 000000D2				call ShiftUp
					.endif
 0000006F		   *@C000A:
 0000006F		   *@C0009:
 0000006F		   *@C0006:
 0000006F		   *@C0003:
 0000006F			TakeInput ENDP

 0000006F			ShiftLeft PROC
 0000006F  B9 00000004			mov ecx, 4
 00000074  BE 00000000			mov esi, 0

 00000079			shiftLoop:
 00000079  60				pushad
 0000007A  C7 05 0000001A R		mov shiftArray[0], 7
	   00000007
 00000084  C7 05 0000001E R		mov shiftArray[4], 7
	   00000007
 0000008E  C7 05 00000022 R		mov shiftArray[8], 7
	   00000007
 00000098  C7 05 00000026 R		mov shiftArray[12], 7
	   00000007
 000000A2  89 35 00000016 R		mov CurrentRow, esi
 000000A8  B9 00000004			mov ecx, 4
 000000AD  BE 00000000			mov esi, 0
 000000B2				innerL:
 000000B2  A1 00000016 R			mov eax, CurrentRow
 000000B7  03 C0				add eax, eax
 000000B9  03 C0				add eax, eax
 000000BB  03 C6				add eax, esi
						.if cells[eax] != 7
 000000BD  80 B8 00000004 R
	   07		   *	    cmp    cells + [eax], 007h
 000000C4  74 05	   *	    je	@C000C
 000000C6  E8 0000030F					call append
						.endif
 000000CB		   *@C000C:
 000000CB  46					inc esi
 000000CC  E2 E4			loop innerL
 000000CE  E8 000002DE			call transferArray
 000000D3  61				popad
 000000D4  46				inc esi
 000000D5  E2 A2			loop shiftLoop
 000000D7  C3				ret
 000000D8			ShiftLeft ENDP

 000000D8			ShiftDown PROC

 000000D8			ShiftDown ENDP

 000000D8			ShiftRight PROC
 000000D8  B9 00000004			mov ecx, 4
 000000DD  BE 00000000			mov esi, 0

 000000E2			shiftLoop:
 000000E2  60				pushad
 000000E3  C7 05 0000001A R		mov shiftArray[0], 7
	   00000007
 000000ED  C7 05 0000001E R		mov shiftArray[4], 7
	   00000007
 000000F7  C7 05 00000022 R		mov shiftArray[8], 7
	   00000007
 00000101  C7 05 00000026 R		mov shiftArray[12], 7
	   00000007
 0000010B  89 35 00000016 R		mov CurrentRow, esi
 00000111  B9 00000004			mov ecx, 4
 00000116  BE 00000000			mov esi, 0
 0000011B				innerL:
 0000011B  A1 00000016 R			mov eax, CurrentRow
 00000120  03 C0				add eax, eax
 00000122  03 C0				add eax, eax
 00000124  03 C6				add eax, esi
						.if cells[eax] != 7
 00000126  80 B8 00000004 R
	   07		   *	    cmp    cells + [eax], 007h
 0000012D  74 05	   *	    je	@C000E
 0000012F  E8 000002A6					call append
						.endif
 00000134		   *@C000E:
 00000134  46					inc esi
 00000135  E2 E4			loop innerL
 00000137  E8 00000275			call transferArray
 0000013C  61				popad
 0000013D  46				inc esi
 0000013E  E2 A2			loop shiftLoop
 00000140  C3				ret
 00000141			ShiftRight ENDP

 00000141			ShiftUp PROC

 00000141			ShiftUp ENDP

 00000141			PrintBoard PROC
 00000141  B9 00000004			mov ecx,rowH
 00000146				L1:		; loop for printing row 1
					INVOKE PrintRowOdd, cells, (cells+1), (cells+2), (cells+3)
 00000146  A0 00000007 R   *	    mov    al, cells+003h
 0000014B  50		   *	    push   eax
 0000014C  A0 00000006 R   *	    mov    al, cells+002h
 00000151  50		   *	    push   eax
 00000152  A0 00000005 R   *	    mov    al, cells+001h
 00000157  50		   *	    push   eax
 00000158  A0 00000004 R   *	    mov    al, cells
 0000015D  50		   *	    push   eax
 0000015E  E8 000000DD	   *	    call   PrintRowOdd
 00000163  E8 00000000 E	    call Crlf
 00000168  E2 DC			loop L1

 0000016A  B9 00000004			mov ecx,rowH
 0000016F				L2:		; loop for printing row 2
				    INVOKE PrintRowEven, (cells+4), (cells+5), (cells+6), (cells+7)
 0000016F  A0 0000000B R   *	    mov    al, cells+007h
 00000174  50		   *	    push   eax
 00000175  A0 0000000A R   *	    mov    al, cells+006h
 0000017A  50		   *	    push   eax
 0000017B  A0 00000009 R   *	    mov    al, cells+005h
 00000180  50		   *	    push   eax
 00000181  A0 00000008 R   *	    mov    al, cells+004h
 00000186  50		   *	    push   eax
 00000187  E8 00000133	   *	    call   PrintRowEven
 0000018C  E8 00000000 E	    call Crlf
 00000191  E2 DC			loop L2
					
 00000193  B9 00000004			mov ecx,rowH
 00000198				L3:		; loop for printing row 3
					INVOKE PrintRowOdd, (cells+8), (cells+9), (cells+10), (cells+11)
 00000198  A0 0000000F R   *	    mov    al, cells+00Bh
 0000019D  50		   *	    push   eax
 0000019E  A0 0000000E R   *	    mov    al, cells+00Ah
 000001A3  50		   *	    push   eax
 000001A4  A0 0000000D R   *	    mov    al, cells+009h
 000001A9  50		   *	    push   eax
 000001AA  A0 0000000C R   *	    mov    al, cells+008h
 000001AF  50		   *	    push   eax
 000001B0  E8 0000008B	   *	    call   PrintRowOdd
 000001B5  E8 00000000 E	    call Crlf
 000001BA  E2 DC			loop L3

 000001BC  B9 00000004			mov ecx,rowH
 000001C1				L4:		; loop for printing row 4
				    INVOKE PrintRowEven, (cells+12), (cells+13), (cells+14), (cells+15)
 000001C1  A0 00000013 R   *	    mov    al, cells+00Fh
 000001C6  50		   *	    push   eax
 000001C7  A0 00000012 R   *	    mov    al, cells+00Eh
 000001CC  50		   *	    push   eax
 000001CD  A0 00000011 R   *	    mov    al, cells+00Dh
 000001D2  50		   *	    push   eax
 000001D3  A0 00000010 R   *	    mov    al, cells+00Ch
 000001D8  50		   *	    push   eax
 000001D9  E8 000000E1	   *	    call   PrintRowEven
 000001DE  E8 00000000 E	    call Crlf
 000001E3  E2 DC			loop L4

				    INVOKE SetColor, black, black ; return to normal color
 000001E5  6A 00	   *	    push   +000000000h
 000001E7  6A 00	   *	    push   +000000000h
 000001E9  E8 000001AD	   *	    call   SetColor
 000001EE  E8 00000000 E	    call Crlf
 000001F3  C3				ret
 000001F4			PrintBoard ENDP

 000001F4			RandomCell PROC
 000001F4  C6 05 0000002A R		mov putCell, 0
	   00
					.repeat
 000001FB		   *@C0010:
 000001FB  B8 00000010				mov eax,16
 00000200  E8 00000000 E			call RandomRange
 00000205  A3 00000000 R			mov ranCell,eax

 0000020A  A1 00000000 R			mov eax, ranCell

						.if cells[eax] == 7 || cells[eax] == 8 
 0000020F  80 B8 00000004 R
	   07		   *	    cmp    cells + [eax], 007h
 00000216  74 09	   *	    je	@C0012
 00000218  80 B8 00000004 R
	   08		   *	    cmp    cells + [eax], 008h
 0000021F  75 15	   *	    jne    @C0011
 00000221		   *@C0012:
 00000221  FE 05 0000002A R				inc putCell
 00000227  8D 35 00000004 R				lea esi,cells			; adds tile color to random cell
 0000022D  03 35 00000000 R				add esi,ranCell
 00000233  C6 06 0B					mov BYTE PTR [esi],11	
						.endif
						
					.until putCell == 1
 00000236		   *@C0011:
 00000236  80 3D 0000002A R
	   01		   *	    cmp    putCell, 001h
 0000023D  75 BC	   *	    jne    @C0010
 0000023F  C3				ret
 00000240			RandomCell ENDP

 00000240			PrintRowOdd PROC c1:BYTE, c2:BYTE, c3:BYTE, c4:BYTE
 00000240  55		   *	    push   ebp
 00000241  8B EC	   *	    mov    ebp, esp
				    INVOKE WriteColorChar, ' ', c1, c1
 00000243  8A 45 08	   *	    mov    al, byte  ptr ss:[ebp]+008h
 00000246  50		   *	    push   eax
 00000247  8A 45 08	   *	    mov    al, byte  ptr ss:[ebp]+008h
 0000024A  50		   *	    push   eax
 0000024B  6A 20	   *	    push   +000000020h
 0000024D  E8 000000EC	   *	    call   WriteColorChar
				    INVOKE WriteColorChar, ' ', c1, c1
 00000252  8A 45 08	   *	    mov    al, byte  ptr ss:[ebp]+008h
 00000255  50		   *	    push   eax
 00000256  8A 45 08	   *	    mov    al, byte  ptr ss:[ebp]+008h
 00000259  50		   *	    push   eax
 0000025A  6A 20	   *	    push   +000000020h
 0000025C  E8 000000DD	   *	    call   WriteColorChar
				    INVOKE WriteColorChar, ' ', c2, c2
 00000261  8A 45 0C	   *	    mov    al, byte  ptr ss:[ebp]+00Ch
 00000264  50		   *	    push   eax
 00000265  8A 45 0C	   *	    mov    al, byte  ptr ss:[ebp]+00Ch
 00000268  50		   *	    push   eax
 00000269  6A 20	   *	    push   +000000020h
 0000026B  E8 000000CE	   *	    call   WriteColorChar
				    INVOKE WriteColorChar, ' ', c2, c2
 00000270  8A 45 0C	   *	    mov    al, byte  ptr ss:[ebp]+00Ch
 00000273  50		   *	    push   eax
 00000274  8A 45 0C	   *	    mov    al, byte  ptr ss:[ebp]+00Ch
 00000277  50		   *	    push   eax
 00000278  6A 20	   *	    push   +000000020h
 0000027A  E8 000000BF	   *	    call   WriteColorChar
					INVOKE WriteColorChar, ' ', c3, c3
 0000027F  8A 45 10	   *	    mov    al, byte  ptr ss:[ebp]+010h
 00000282  50		   *	    push   eax
 00000283  8A 45 10	   *	    mov    al, byte  ptr ss:[ebp]+010h
 00000286  50		   *	    push   eax
 00000287  6A 20	   *	    push   +000000020h
 00000289  E8 000000B0	   *	    call   WriteColorChar
				    INVOKE WriteColorChar, ' ', c3, c3
 0000028E  8A 45 10	   *	    mov    al, byte  ptr ss:[ebp]+010h
 00000291  50		   *	    push   eax
 00000292  8A 45 10	   *	    mov    al, byte  ptr ss:[ebp]+010h
 00000295  50		   *	    push   eax
 00000296  6A 20	   *	    push   +000000020h
 00000298  E8 000000A1	   *	    call   WriteColorChar
				    INVOKE WriteColorChar, ' ', c4, c4
 0000029D  8A 45 14	   *	    mov    al, byte  ptr ss:[ebp]+014h
 000002A0  50		   *	    push   eax
 000002A1  8A 45 14	   *	    mov    al, byte  ptr ss:[ebp]+014h
 000002A4  50		   *	    push   eax
 000002A5  6A 20	   *	    push   +000000020h
 000002A7  E8 00000092	   *	    call   WriteColorChar
				    INVOKE WriteColorChar, ' ', c4, c4
 000002AC  8A 45 14	   *	    mov    al, byte  ptr ss:[ebp]+014h
 000002AF  50		   *	    push   eax
 000002B0  8A 45 14	   *	    mov    al, byte  ptr ss:[ebp]+014h
 000002B3  50		   *	    push   eax
 000002B4  6A 20	   *	    push   +000000020h
 000002B6  E8 00000083	   *	    call   WriteColorChar
				    ret
 000002BB  C9		   *	    leave  
 000002BC  C2 0010	   *	    ret    00010h
 000002BF			PrintRowOdd ENDP

 000002BF			PrintRowEven PROC c1:BYTE, c2:BYTE, c3:BYTE, c4:BYTE
 000002BF  55		   *	    push   ebp
 000002C0  8B EC	   *	    mov    ebp, esp
				    INVOKE WriteColorChar, ' ', c1, c1
 000002C2  8A 45 08	   *	    mov    al, byte  ptr ss:[ebp]+008h
 000002C5  50		   *	    push   eax
 000002C6  8A 45 08	   *	    mov    al, byte  ptr ss:[ebp]+008h
 000002C9  50		   *	    push   eax
 000002CA  6A 20	   *	    push   +000000020h
 000002CC  E8 0000006D	   *	    call   WriteColorChar
				    INVOKE WriteColorChar, ' ', c1, c1
 000002D1  8A 45 08	   *	    mov    al, byte  ptr ss:[ebp]+008h
 000002D4  50		   *	    push   eax
 000002D5  8A 45 08	   *	    mov    al, byte  ptr ss:[ebp]+008h
 000002D8  50		   *	    push   eax
 000002D9  6A 20	   *	    push   +000000020h
 000002DB  E8 0000005E	   *	    call   WriteColorChar
				    INVOKE WriteColorChar, ' ', c2, c2
 000002E0  8A 45 0C	   *	    mov    al, byte  ptr ss:[ebp]+00Ch
 000002E3  50		   *	    push   eax
 000002E4  8A 45 0C	   *	    mov    al, byte  ptr ss:[ebp]+00Ch
 000002E7  50		   *	    push   eax
 000002E8  6A 20	   *	    push   +000000020h
 000002EA  E8 0000004F	   *	    call   WriteColorChar
				    INVOKE WriteColorChar, ' ', c2, c2
 000002EF  8A 45 0C	   *	    mov    al, byte  ptr ss:[ebp]+00Ch
 000002F2  50		   *	    push   eax
 000002F3  8A 45 0C	   *	    mov    al, byte  ptr ss:[ebp]+00Ch
 000002F6  50		   *	    push   eax
 000002F7  6A 20	   *	    push   +000000020h
 000002F9  E8 00000040	   *	    call   WriteColorChar
					INVOKE WriteColorChar, ' ', c3, c3
 000002FE  8A 45 10	   *	    mov    al, byte  ptr ss:[ebp]+010h
 00000301  50		   *	    push   eax
 00000302  8A 45 10	   *	    mov    al, byte  ptr ss:[ebp]+010h
 00000305  50		   *	    push   eax
 00000306  6A 20	   *	    push   +000000020h
 00000308  E8 00000031	   *	    call   WriteColorChar
				    INVOKE WriteColorChar, ' ', c3, c3
 0000030D  8A 45 10	   *	    mov    al, byte  ptr ss:[ebp]+010h
 00000310  50		   *	    push   eax
 00000311  8A 45 10	   *	    mov    al, byte  ptr ss:[ebp]+010h
 00000314  50		   *	    push   eax
 00000315  6A 20	   *	    push   +000000020h
 00000317  E8 00000022	   *	    call   WriteColorChar
				    INVOKE WriteColorChar, ' ', c4, c4
 0000031C  8A 45 14	   *	    mov    al, byte  ptr ss:[ebp]+014h
 0000031F  50		   *	    push   eax
 00000320  8A 45 14	   *	    mov    al, byte  ptr ss:[ebp]+014h
 00000323  50		   *	    push   eax
 00000324  6A 20	   *	    push   +000000020h
 00000326  E8 00000013	   *	    call   WriteColorChar
				    INVOKE WriteColorChar, ' ', c4, c4
 0000032B  8A 45 14	   *	    mov    al, byte  ptr ss:[ebp]+014h
 0000032E  50		   *	    push   eax
 0000032F  8A 45 14	   *	    mov    al, byte  ptr ss:[ebp]+014h
 00000332  50		   *	    push   eax
 00000333  6A 20	   *	    push   +000000020h
 00000335  E8 00000004	   *	    call   WriteColorChar
				    ret
 0000033A  C9		   *	    leave  
 0000033B  C2 0010	   *	    ret    00010h
 0000033E			PrintRowEven ENDP

 0000033E			WriteColorChar PROC USES eax, char:BYTE, forecolor:BYTE, backcolor:BYTE 
 0000033E  55		   *	    push   ebp
 0000033F  8B EC	   *	    mov    ebp, esp
 00000341  50		   *	    push   eax
				    INVOKE SetColor, forecolor, backcolor
 00000342  8A 45 10	   *	    mov    al, byte  ptr ss:[ebp]+010h
 00000345  50		   *	    push   eax
 00000346  8A 45 0C	   *	    mov    al, byte  ptr ss:[ebp]+00Ch
 00000349  50		   *	    push   eax
 0000034A  E8 0000004C	   *	    call   SetColor
 0000034F  8A 45 08		    mov al, char
 00000352  E8 00000000 E	    call WriteChar
					INVOKE SetColor, forecolor, backcolor
 00000357  8A 45 10	   *	    mov    al, byte  ptr ss:[ebp]+010h
 0000035A  50		   *	    push   eax
 0000035B  8A 45 0C	   *	    mov    al, byte  ptr ss:[ebp]+00Ch
 0000035E  50		   *	    push   eax
 0000035F  E8 00000037	   *	    call   SetColor
 00000364  8A 45 08		    mov al, char
 00000367  E8 00000000 E	    call WriteChar
					INVOKE SetColor, forecolor, backcolor
 0000036C  8A 45 10	   *	    mov    al, byte  ptr ss:[ebp]+010h
 0000036F  50		   *	    push   eax
 00000370  8A 45 0C	   *	    mov    al, byte  ptr ss:[ebp]+00Ch
 00000373  50		   *	    push   eax
 00000374  E8 00000022	   *	    call   SetColor
 00000379  8A 45 08		    mov al, char
 0000037C  E8 00000000 E	    call WriteChar
					INVOKE SetColor, forecolor, backcolor
 00000381  8A 45 10	   *	    mov    al, byte  ptr ss:[ebp]+010h
 00000384  50		   *	    push   eax
 00000385  8A 45 0C	   *	    mov    al, byte  ptr ss:[ebp]+00Ch
 00000388  50		   *	    push   eax
 00000389  E8 0000000D	   *	    call   SetColor
 0000038E  8A 45 08		    mov al, char
 00000391  E8 00000000 E	    call WriteChar
				    ret
 00000396  58		   *	    pop    eax
 00000397  C9		   *	    leave  
 00000398  C2 000C	   *	    ret    0000Ch
 0000039B			WriteColorChar ENDP

 0000039B			SetColor PROC, forecolor:BYTE, backcolor:BYTE
 0000039B  55		   *	    push   ebp
 0000039C  8B EC	   *	    mov    ebp, esp
 0000039E  0F B6 45 0C		    movzx eax, backcolor
 000003A2  C1 E0 04		    shl eax, 4
 000003A5  0A 45 08		    or al, forecolor
 000003A8  E8 00000000 E	    call SetTextColor       ; from Irvine32.lib
				    ret
 000003AD  C9		   *	    leave  
 000003AE  C2 0008	   *	    ret    00008h
 000003B1			SetColor ENDP

 000003B1			transferArray PROC
 000003B1  60				pushad
 000003B2  B9 00000004			mov ecx, 4
 000003B7  BE 00000000			mov esi, 0
 000003BC				fill:
 000003BC  8B 14 B5				mov edx, shiftArray[esi*4]
	   0000001A R
 000003C3  8B 1D 00000016 R			mov ebx, CurrentRow
 000003C9  03 DB				add ebx, ebx
 000003CB  03 DB				add ebx, ebx
 000003CD  03 DE				add ebx, esi
 000003CF  88 93 00000004 R			mov cells[ebx], dl
 000003D5  46					inc esi
 000003D6  E2 E4			loop fill
 000003D8  61				popad
 000003D9  C3				ret
 000003DA			transferArray ENDP

 000003DA			append PROC
 000003DA  60				pushad
 000003DB  B9 00000004			mov ecx, 4
 000003E0  BE 00000000			mov esi, 0
 000003E5				appendValue:
						.if shiftArray[esi*4] == 7
 000003E5  83 3C B5
	   0000001A R 07   *	    cmp    shiftArray + [esi * 004h], 007h
 000003ED  75 11	   *	    jne    @C0015
 000003EF  0F B6 98					movzx ebx, cells[eax]
	   00000004 R
 000003F6  89 1C B5					mov shiftArray[esi*4], ebx
	   0000001A R
 000003FD  46						inc esi
 000003FE  EB 03					jmp outOfLoop
						.endif
 00000400		   *@C0015:
 00000400  46					inc esi
 00000401  E2 E2			loop appendValue
 00000403				outOfLoop:
 00000403  61				popad
 00000404  C3				ret
 00000405			append ENDP

				END MAIN
Microsoft (R) Macro Assembler Version 14.10.25019.0	    12/07/17 15:12:14
2048			(2048.asm			     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000002B Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000405 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintBoard . . . . . . . . . . .	P Near	 00000141 _TEXT	Length= 000000B3 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000146 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 0000016F _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 00000198 _TEXT	
  L4 . . . . . . . . . . . . . .	L Near	 000001C1 _TEXT	
PrintRowEven . . . . . . . . . .	P Near	 000002BF _TEXT	Length= 0000007F Public STDCALL
  c1 . . . . . . . . . . . . . .	Byte	 bp + 00000008
  c2 . . . . . . . . . . . . . .	Byte	 bp + 0000000C
  c3 . . . . . . . . . . . . . .	Byte	 bp + 00000010
  c4 . . . . . . . . . . . . . .	Byte	 bp + 00000014
PrintRowOdd  . . . . . . . . . .	P Near	 00000240 _TEXT	Length= 0000007F Public STDCALL
  c1 . . . . . . . . . . . . . .	Byte	 bp + 00000008
  c2 . . . . . . . . . . . . . .	Byte	 bp + 0000000C
  c3 . . . . . . . . . . . . . .	Byte	 bp + 00000010
  c4 . . . . . . . . . . . . . .	Byte	 bp + 00000014
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomCell . . . . . . . . . . .	P Near	 000001F4 _TEXT	Length= 0000004C Public STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetColor . . . . . . . . . . . .	P Near	 0000039B _TEXT	Length= 00000016 Public STDCALL
  forecolor  . . . . . . . . . .	Byte	 bp + 00000008
  backcolor  . . . . . . . . . .	Byte	 bp + 0000000C
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShiftDown  . . . . . . . . . . .	P Near	 000000D8 _TEXT	Length= 00000000 Public STDCALL
ShiftLeft  . . . . . . . . . . .	P Near	 0000006F _TEXT	Length= 00000069 Public STDCALL
  shiftLoop  . . . . . . . . . .	L Near	 00000079 _TEXT	
  innerL . . . . . . . . . . . .	L Near	 000000B2 _TEXT	
ShiftRight . . . . . . . . . . .	P Near	 000000D8 _TEXT	Length= 00000069 Public STDCALL
  shiftLoop  . . . . . . . . . .	L Near	 000000E2 _TEXT	
  innerL . . . . . . . . . . . .	L Near	 0000011B _TEXT	
ShiftUp  . . . . . . . . . . . .	P Near	 00000141 _TEXT	Length= 00000000 Public STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
TakeInput  . . . . . . . . . . .	P Near	 00000027 _TEXT	Length= 00000048 Public STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteColorChar . . . . . . . . .	P Near	 0000033E _TEXT	Length= 0000005D Public STDCALL
  char . . . . . . . . . . . . .	Byte	 bp + 00000008
  forecolor  . . . . . . . . . .	Byte	 bp + 0000000C
  backcolor  . . . . . . . . . .	Byte	 bp + 00000010
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
append . . . . . . . . . . . . .	P Near	 000003DA _TEXT	Length= 0000002B Public STDCALL
  appendValue  . . . . . . . . .	L Near	 000003E5 _TEXT	
  outOfLoop  . . . . . . . . . .	L Near	 00000403 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000027 Public STDCALL
  mainLoop . . . . . . . . . . .	L Near	 00000014 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
transferArray  . . . . . . . . .	P Near	 000003B1 _TEXT	Length= 00000029 Public STDCALL
  fill . . . . . . . . . . . . .	L Near	 000003BC _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
CurrentRow . . . . . . . . . . .	DWord	 00000016 _DATA	
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cells  . . . . . . . . . . . . .	Byte	 00000004 _DATA	
color1 . . . . . . . . . . . . .	Number	 0000000Bh   
color2 . . . . . . . . . . . . .	Number	 00000009h   
color3 . . . . . . . . . . . . .	Number	 00000005h   
color4 . . . . . . . . . . . . .	Number	 00000001h   
color5 . . . . . . . . . . . . .	Number	 0000000Ch   
columns  . . . . . . . . . . . .	Number	 00000004h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
empty2 . . . . . . . . . . . . .	Number	 00000008h   
empty  . . . . . . . . . . . . .	Number	 00000007h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
key  . . . . . . . . . . . . . .	Byte	 00000015 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
loops  . . . . . . . . . . . . .	Number	 00000002h   
magenta  . . . . . . . . . . . .	Number	 00000005h   
putCell  . . . . . . . . . . . .	Byte	 0000002A _DATA	
ranCell  . . . . . . . . . . . .	DWord	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rowH . . . . . . . . . . . . . .	Number	 00000004h   
rows . . . . . . . . . . . . . .	Number	 00000004h   
shiftArray . . . . . . . . . . .	DWord	 0000001A _DATA	
shiftDirection . . . . . . . . .	Byte	 00000014 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
